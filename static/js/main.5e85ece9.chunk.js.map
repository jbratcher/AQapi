{"version":3,"sources":["header/index.js","main/UserOptions.js","main/LocationInput.js","main/Form.js","data/Clothing.js","main/ClothesData.js","main/ScoreData.js","secrets.js","main/MapContainer.js","main/Output.js","main/index.js","Footer.js","App.js","Scheduler.js","BestDay.js","Forcast.js","About.js","registerServiceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","id","Link","to","href","className","aria-hidden","Component","UserOptions","_this$props","handleScaleChange","handleWarmthPrefChange","userTempScale","userWarmthPreference","value","onChange","LocationInput","cityList","cityInput","countryInput","countryList","getData","handleCityInput","handleCountryInput","handleStateInput","getLocationData","stateInput","stateList","onClick","htmlFor","map","country","i","key","city","type","name","Form","main_UserOptions","main_LocationInput","Clothing","cold","head","text","imgsrc","torso","legs","feet","chilly","neutral","warm","hot","ClothesData","getCurrentTempIndex","currentTemp","setState","currentTempIndex","calculateWarmthPrefernce","tempIndexCalculated","_this$state","alt","src","ScoreData","airQuality","bestDay","currentHumidity","currentUV","currentWeatherIcon","currentWeatherSummary","data","forcastDayName","mainPollutant","selectedDayName","weatherScore","formattedTemperatureScale","toUpperCase","formattedTemperature","concat","parseInt","covertedScore","toFixed","convertedHumidity","getWeatherIcon","weatherScoreRating","getWeatherScoreRatingColor","apiKey","darkskyApiKey","gmapsApiKey","MapContainer","_Component","inherits","createClass","currentLat","currentLng","currentLocation","lat","lng","_this$props2","loaded","dist","center","initialCenter","google","zoom","position","GoogleApiWrapper","Output","dataReceived","dataRequested","main_ClothesData","main_ScoreData","main_MapContainer","Main","main_Form","main_Output","Footer","App","calculateWeatherScore","currentPrecipProbability","humidityScore","totalScore","tempScale","Math","abs","medianTemp","stdDevTemp","uvScale","rainScale","fetchCurrentConditions","_this$state2","fetch","then","res","json","parsedJSON","console","log","currently","humidity","precipProbability","apparentTemperature","uvIndex","icon","summary","catch","error","fetchCityList","e","target","toConsumableArray","fetchDefaultCityList","fetchStateList","fetchDefaultStateList","fetchCountryList","fetchLocation","current","pollution","aqius","location","coordinates","mainus","fetchStd","preventDefault","stateinput","loadDefaultCountry","loadDefaultState","loadDefaultCity","_this$state3","header","main","src_Footer","Scheduler","selectedDayHumidity","selectedDayPrecipProbability","selectedDayTempHigh","selectedDayTempLow","selectedDayUV","averagedTemp","selectedDayWeatherScore","selectedDayAveragedTemp","calcuateWeatherScoresByDay","forcastHumidity","forcastPrecipProbability","forcastTempHigh","forcastTempLow","forcastUV","scoresArray","push","forcastWeatherScores","fetchForcast","daily","d","apparentTemperatureHigh","apparentTemperatureLow","forcastIsRaning","forcastTime","sunriseTime","forcastWeatherIcon","forcastWeatherSummary","fetchForcastBySelectedDay","_this$state4","selectedDayIndex","selectedDayIsRaning","selectedDayWeatherIcon","selectedDayWeatherSummary","isDaySelected","handleDayChange","getDeltaSelectedDay","_this$state5","currentDayIndex","deltaSelectedDay","Date","days","currentDayName","getDay","selectedDayAQ","selectedDayData","selectedDayMainPollutant","selectedDayUserTempScale","_this$state6","BestDay","findBestDayToRun","index","indexOf","max","apply","date","bestDayIndex","bestDayFound","getDeltaBestDay","deltaBestDay","_this$state7","Forcast","averagedTempArray","forcastAveragedTemp","isDataRequested","isDataReceived","forcastWeatherIcons","getForcastDayNames","forcastDayNames","getForcastScores","scoreBoard","scoreData","About","class","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","BrowserRouter","basename","process","Switch","Route","exact","path","component","src_Scheduler","src_BestDay","src_Forcast","src_About","document","getElementById","URL","origin","addEventListener","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5e85ece9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    \r\n    return(\r\n\r\n\r\n      <header>\r\n        <section id =\"mainHeader\">\r\n          <section id=\"brand\">\r\n            <Link to=\"/\">\r\n              <h1>ShouldIRun?</h1>\r\n            </Link>\r\n          </section>\r\n    \r\n          <a href=\"#mainHeaderNav\" id=\"menu-toggle\" className=\"toggle\">\r\n            <i className=\"fa fa-bars fa-2x\" aria-hidden=\"true\"></i>\r\n          </a>\r\n\r\n          <nav id=\"mainHeaderNav\">\r\n            <ul>\r\n              <li>\r\n                <a id=\"nav-close\" className=\"toggle\" href=\"#top\">\r\n                  <i className=\"fa fa-times fa-2x\"></i>\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/\">Home</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/scheduler\">Scheduler</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/bestday\">Best Day</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/forcast\">7 Day Forcast</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/about\">About</Link> \r\n              </li>\r\n            </ul>\r\n          </nav>\r\n\r\n        </section>\r\n        <section id=\"subheader\">\r\n          <p>Get a rating on current weather conditions for your run</p>\r\n        </section>\r\n      </header>\r\n\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass UserOptions extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n\r\n    };\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      handleScaleChange,\r\n      handleWarmthPrefChange,\r\n      userTempScale,\r\n      userWarmthPreference\r\n    } = this.props;\r\n\r\n    return(\r\n\r\n        <section id=\"userOptions\">\r\n\r\n          <section className=\"column\">\r\n          \r\n            <h3>Options</h3>\r\n\r\n            <label>Temperature scale</label>\r\n\r\n            <select \r\n              id=\"userTempScale\" \r\n              value={userTempScale} \r\n              onChange={handleScaleChange}\r\n              >\r\n              <option value=\"f\">Fahrenheit</option>\r\n              <option value=\"c\">Celcius</option>\r\n              <option value=\"k\">Kelvin</option>\r\n            </select>\r\n\r\n          </section>\r\n\r\n          <section className=\"column\">\r\n\r\n            <label>Warmth Preference</label>\r\n\r\n            <select \r\n              id=\"userWarmthPreference\" \r\n              value={userWarmthPreference} \r\n              onChange={handleWarmthPrefChange}\r\n            >\r\n            \r\n              <option value=\"hot\">Mucher Cooler</option>\r\n              <option value=\"warm\">A Little Cooler</option>\r\n              <option value=\"neutral\">Neutral</option>\r\n              <option value=\"chilly\">A Little Warmer</option>\r\n              <option value=\"cold\">Much Warmer</option>\r\n              \r\n            </select>\r\n\r\n          </section>\r\n\r\n        </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default UserOptions;\r\n","import React, { Component } from 'react';\r\n\r\nclass LocationInput extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n\r\n    };\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      cityList,\r\n      cityInput,\r\n      countryInput,\r\n      countryList,\r\n      getData,\r\n      handleCityInput,\r\n      handleCountryInput,\r\n      handleStateInput,\r\n      getLocationData,\r\n      stateInput,\r\n      stateList,\r\n    } = this.props;\r\n\r\n    return(\r\n\r\n        <section id=\"formInput\">\r\n\r\n          <h3>Location</h3>\r\n          \r\n          {/* Get localized weather data data from closest weather station to your IP */}\r\n\r\n          <button id=\"getLocation\" onClick={getLocationData}>Use my location</button>\r\n          \r\n          <p>-- <b>OR</b> --</p>\r\n\r\n          <section className=\"column\">\r\n\r\n            <label id=\"formLabel\">Enter a Location</label>\r\n            \r\n            {/* Select country, state, and city for user location input */}\r\n\r\n            <form>\r\n\r\n              <label htmlFor=\"country\">Country</label>\r\n              <select value={countryInput} onChange={handleCountryInput}>\r\n                {countryList.map((country, i) => <option key={i} value={country}>{country}</option> )}\r\n              </select>\r\n\r\n              <label htmlFor=\"state\">State</label>\r\n              <select value={stateInput} onChange={handleStateInput}>\r\n                {stateList.map((state, i) => <option key={i} value={state}>{state}</option> )}\r\n              </select>\r\n\r\n              <label htmlFor=\"city\">City</label>\r\n              <select value={cityInput} onChange={handleCityInput}>\r\n                {cityList.map((city, i) => <option key={i} value={city}>{city}</option> )}\r\n              </select>\r\n\r\n              <button onClick={getData} type=\"submit\" value=\"submit\" name=\"submit\">Get Data</button>\r\n\r\n            </form>\r\n\r\n          </section>\r\n\r\n        </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default LocationInput;\r\n","import React, { Component } from 'react';\r\nimport UserOptions from './UserOptions';\r\nimport LocationInput from './LocationInput';\r\n\r\nclass Form extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n\r\n    };\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      cityInput,\r\n      cityList,\r\n      countryInput,\r\n      countryList,\r\n      handleCityInput,\r\n      handleCountryInput,\r\n      handleStateInput,\r\n      handleScaleChange,\r\n      handleWarmthPrefChange,\r\n      getData,\r\n      getLocationData,\r\n      stateInput,\r\n      stateList,\r\n      userTempScale,\r\n      userWarmthPreference\r\n    } = this.props;\r\n\r\n    return(\r\n\r\n      <section id=\"formInputSection\">\r\n\r\n        <UserOptions\r\n\r\n          handleScaleChange={handleScaleChange}\r\n          handleWarmthPrefChange={handleWarmthPrefChange}\r\n          userTempScale={userTempScale}\r\n          userWarmthPreference={userWarmthPreference}\r\n\r\n        />\r\n\r\n\r\n        <LocationInput\r\n        \r\n          cityInput={cityInput}\r\n          cityList={cityList}\r\n          countryInput={countryInput}\r\n          countryList={countryList}\r\n          handleCountryInput={handleCountryInput}\r\n          handleStateInput={handleStateInput}\r\n          handleCityInput={handleCityInput}\r\n          getData={getData}\r\n          getLocationData={getLocationData}\r\n          stateInput={stateInput}\r\n          stateList={stateList}\r\n\r\n        />\r\n\r\n      </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Form;\r\n","// Clothing data object to get clothes list based on temperature index and user warmth preference\r\n\r\nconst Clothing = {\r\n    cold: {\r\n      head: {\r\n          text: \"Beanie\",\r\n          imgsrc: \"https://hips.hearstapps.com/vader-prod.s3.amazonaws.com/1533851320-everlane-1533851313.jpg\"\r\n      },\r\n      torso: {\r\n        text: \"Long-sleeve athletic shirt\",\r\n        imgsrc: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQqcsbsQ30ATXDyrEMidoBC4PGQvzDGqlXyehQLyjqHiTJOzxFu\"\r\n      },\r\n      legs: {\r\n        text: \"Insulated track pants\" ,\r\n        imgsrc: \"https://www.patagonia.com/dis/dw/image/v2/ABBM_PRD/on/demandware.static/-/Sites-patagonia-master/default/dw6af579dc/images/hi-res/24102_BLK.jpg?sw=300&sh=300&sfrm=png\"\r\n      },\r\n      feet: {\r\n        text: \"Insulated socks\",\r\n        imgsrc: \"https://www.verywellfit.com/thmb/Wox_s1mhrS095uy3_IQCjjcK1Pw=/1001x1001/filters:no_upscale()/darntoughvermontsocks-56a83a963df78cf7729d2a76.jpg\"\r\n      }\r\n    },\r\n    chilly: {\r\n      head: {\r\n        text: \"Baseball cap\",\r\n        imgsrc: \"https://images-na.ssl-images-amazon.com/images/I/81vqBRNIuKL._UX522_.jpg\"\r\n      },\r\n      torso: {\r\n        text: \"Short-sleeve athletic t-shirt\",\r\n        imgsrc: \"https://alltopguide.com/wp-content/uploads/2016/08/B01AQR03N0.jpg\"\r\n      },\r\n      legs: {\r\n        text: \"Athletic shorts\",\r\n        imgsrc: \"https://www.patagonia.com/dis/dw/image/v2/ABBM_PRD/on/demandware.static/-/Sites-patagonia-master/default/dwbe64c536/images/hi-res/24632_BLK.jpg?sw=750&sh=750&sm=fit&sfrm=png\"\r\n      },\r\n      feet: {\r\n        text: \"Insulated socks\",\r\n        imgsrc: \"https://www.verywellfit.com/thmb/Wox_s1mhrS095uy3_IQCjjcK1Pw=/1001x1001/filters:no_upscale()/darntoughvermontsocks-56a83a963df78cf7729d2a76.jpg\"\r\n      }\r\n    },\r\n    neutral: {\r\n      head: {\r\n        text: \"\",\r\n        imgsrc: \"\"\r\n      },\r\n      torso: {\r\n        text: \"Short-sleeve athletic t-shirt\",\r\n        imgsrc: \"https://alltopguide.com/wp-content/uploads/2016/08/B01AQR03N0.jpg\"\r\n      },\r\n      legs: {\r\n        text: \"Athletic shorts\",\r\n        imgsrc: \"https://www.patagonia.com/dis/dw/image/v2/ABBM_PRD/on/demandware.static/-/Sites-patagonia-master/default/dwbe64c536/images/hi-res/24632_BLK.jpg?sw=750&sh=750&sm=fit&sfrm=png\"\r\n      },\r\n      feet: {\r\n        text: \"Padded socks\",\r\n        imgsrc: \"https://images-na.ssl-images-amazon.com/images/I/91KJNYH1pVL._SX355_.jpg\"\r\n      }\r\n    },\r\n    warm: {\r\n      head: {\r\n        text: \"\",\r\n        imgsrc: \"\"\r\n      },\r\n      torso: {\r\n        text: \"Tank top\",\r\n        imgsrc: \"http://d3d71ba2asa5oz.cloudfront.net/62001083/images/jn305-royalwhite.jpg\"\r\n      },\r\n      legs: {\r\n        text: \"Athletic shorts\",\r\n        imgsrc: \"https://www.patagonia.com/dis/dw/image/v2/ABBM_PRD/on/demandware.static/-/Sites-patagonia-master/default/dwbe64c536/images/hi-res/24632_BLK.jpg?sw=750&sh=750&sm=fit&sfrm=png\"\r\n      },\r\n      feet: {\r\n        text: \"Padded socks\",\r\n        imgsrc: \"https://images-na.ssl-images-amazon.com/images/I/91KJNYH1pVL._SX355_.jpg\"\r\n      }\r\n    },\r\n    hot: {\r\n      head: {\r\n        text: \"\",\r\n        imgsrc: \"\"\r\n      },\r\n      torso: {\r\n        text: \"Tank top\",\r\n        imgsrc: \"http://d3d71ba2asa5oz.cloudfront.net/62001083/images/jn305-royalwhite.jpg\"\r\n      },\r\n      legs: {\r\n        text: \"Athletic shorts\",\r\n        imgsrc: \"https://www.patagonia.com/dis/dw/image/v2/ABBM_PRD/on/demandware.static/-/Sites-patagonia-master/default/dwbe64c536/images/hi-res/24632_BLK.jpg?sw=750&sh=750&sm=fit&sfrm=png\"\r\n      },\r\n      feet: {\r\n        text: \"Padded socks\",\r\n        imgsrc: \"https://images-na.ssl-images-amazon.com/images/I/91KJNYH1pVL._SX355_.jpg\"\r\n      }\r\n    }\r\n};\r\n\r\nexport default Clothing;","import React, { Component } from 'react';\r\nimport Clothing from '../data/Clothing';\r\n\r\nclass ClothesData extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentTempIndex: \"\",\r\n      tempIndexCalculated: false\r\n    };\r\n  }\r\n\r\n  getCurrentTempIndex = () => {\r\n\r\n    const { currentTemp } = this.props;\r\n\r\n    currentTemp >= 85\r\n      ? this.setState({\r\n          currentTempIndex: \"hot\"\r\n        })\r\n      : currentTemp < 85 && currentTemp >= 75\r\n      ? this.setState({\r\n          currentTempIndex: \"warm\"\r\n        })\r\n      : currentTemp < 75  && currentTemp >= 65\r\n      ? this.setState({\r\n          currentTempIndex: \"neutral\"\r\n        })\r\n      : currentTemp < 55 && currentTemp >=45\r\n      ? this.setState({\r\n          currentTempIndex: \"chilly\"\r\n        })\r\n      : currentTemp < 45\r\n      ? this.setState({\r\n          currentTempIndex: \"cold\"\r\n        })\r\n      : this.setState({\r\n          currentTempIndex: this.state.currentTempIndex\r\n      });\r\n\r\n  }\r\n\r\n  calculateWarmthPrefernce = () => {\r\n\r\n    const { userWarmthPreference } = this.props;\r\n\r\n    userWarmthPreference === 'cold'\r\n      ? this.setState({\r\n          currentTempIndex: \"cold\"\r\n        })\r\n      : userWarmthPreference === 'chilly'\r\n      ? this.setState({\r\n          currentTempIndex: \"chilly\"\r\n        })\r\n      : userWarmthPreference === 'warm'\r\n      ? this.setState({\r\n          currentTempIndex: \"warm\"\r\n        })\r\n      : userWarmthPreference === 'hot'\r\n      ? this.setState({\r\n          currentTempIndex: \"hot\"\r\n        })\r\n      : this.getCurrentTempIndex();\r\n\r\n    this.setState({\r\n      tempIndexCalculated: true\r\n    });\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.getCurrentTempIndex();\r\n\r\n    this.calculateWarmthPrefernce();\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      currentTempIndex,\r\n      tempIndexCalculated\r\n    } = this.state;\r\n    \r\n    return(\r\n\r\n      <section id=\"clothesData\">\r\n\r\n        <p>What to wear</p>\r\n\r\n        {/* Render nav once temperature index is calculated */}\r\n\r\n        <nav>\r\n\r\n          { tempIndexCalculated ?\r\n\r\n            <ul id=\"clothing\">\r\n\r\n              {/* If not head wear is needed don't render head list item */}\r\n\r\n              {Clothing[currentTempIndex].head.text ?\r\n                  <li id=\"head\">\r\n                    <img alt=\"head\" src={Clothing[currentTempIndex].head.imgsrc} />\r\n                    <p>{Clothing[currentTempIndex].head.text}</p>\r\n                  </li>\r\n              : null }\r\n              <li id=\"torso\">\r\n                <img alt=\"torso\" src={Clothing[currentTempIndex].torso.imgsrc} />\r\n                <p>{Clothing[currentTempIndex].torso.text}</p>\r\n              </li>\r\n              <li id=\"legs\">\r\n                <img alt=\"legs\" src={Clothing[currentTempIndex].legs.imgsrc} />\r\n                <p>{Clothing[currentTempIndex].legs.text}</p>\r\n              </li>\r\n              <li id=\"feet\">\r\n                <img alt=\"feet\" src={Clothing[currentTempIndex].feet.imgsrc} />\r\n                <p>{Clothing[currentTempIndex].feet.text}</p>\r\n              </li>\r\n            </ul>\r\n\r\n          : null }\r\n\r\n        </nav>\r\n\r\n      </section>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default ClothesData;\r\n","import React, { Component } from 'react';\r\n\r\nclass ScoreData extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      airQuality,\r\n      bestDay,\r\n      currentHumidity,\r\n      currentTemp,\r\n      currentUV,\r\n      currentWeatherIcon,\r\n      currentWeatherSummary,\r\n      data,\r\n      forcastDayName,\r\n      mainPollutant,\r\n      selectedDayName,\r\n      userTempScale,\r\n      weatherScore\r\n    } = this.props;\r\n\r\n    // Number converstions\r\n\r\n    let formattedTemperatureScale = userTempScale.toUpperCase();\r\n\r\n    let convertedTemperature =\r\n\r\n      userTempScale === \"f\"\r\n        ? currentTemp\r\n        : userTempScale === \"c\"\r\n        ? ((currentTemp - 32) * (5/9))\r\n        : userTempScale === \"k\"\r\n        ? ((currentTemp - 32) *(5/9) + 273.15)\r\n        : \"\";\r\n\r\n    let formattedTemperature = `${parseInt(convertedTemperature, 10)} ° ${formattedTemperatureScale}`;\r\n\r\n    let covertedScore = weatherScore.toFixed(1);\r\n\r\n    let convertedHumidity = parseInt((currentHumidity * 100), 10);\r\n\r\n    // calculate scores\r\n\r\n    const getWeatherIcon =\r\n\r\n      currentWeatherIcon === \"partly-cloudy-day\"\r\n        ? \"wi wi-day-sunny-overcast\"\r\n        : currentWeatherIcon === \"wind\"\r\n        ? \"wi wi-day-windy\"\r\n        : currentWeatherIcon === \"sunny\" || currentWeatherIcon === \"clear-day\"\r\n        ? \"wi wi-day-sunny\"\r\n        : currentWeatherIcon === \"clear-night\"\r\n        ? \"wi wi-night-clear\"\r\n        : currentWeatherIcon === \"partly-cloudy-night\"\r\n        ? \"wi wi-night-partly-cloudy\"\r\n        : currentWeatherIcon === \"cloudy\"\r\n        ? \"wi wi-cloudy\"\r\n        : currentWeatherIcon === \"rain\"\r\n        ? \"wi wi-rain\"\r\n        : currentWeatherIcon === \"snow\"\r\n        ? \"wi wi-snow\"\r\n        : currentWeatherIcon === \"sleet\"\r\n        ? \"wi wi-sleet\"\r\n        : currentWeatherIcon === \"fog\"\r\n        ? \"wi wi-fog\"\r\n        : null;\r\n\r\n    const weatherScoreRating =\r\n\r\n      covertedScore >= 7.5\r\n        ? 'Good'\r\n        : covertedScore >= 5 && covertedScore < 7.5\r\n        ? 'Average'\r\n        : covertedScore >= 2.5 && covertedScore < 5\r\n        ? 'Poor'\r\n        : covertedScore >= 0 && covertedScore < 2.5\r\n        ? 'Miserable'\r\n        : null;\r\n\r\n    const getWeatherScoreRatingColor =\r\n\r\n      weatherScoreRating === 'Good'\r\n        ? 'green'\r\n        : weatherScoreRating === 'Average'\r\n        ? 'blue'\r\n        : weatherScoreRating === 'Poor'\r\n        ? 'yellow'\r\n        : weatherScoreRating === 'Miserable'\r\n        ? 'red'\r\n        : null;\r\n\r\n    return(\r\n\r\n      <section id=\"scoreData\">\r\n        \r\n        <span id=\"day\">{bestDay || selectedDayName  || forcastDayName}</span>\r\n        <i id=\"weatherIcon\" className={getWeatherIcon}\r\n        ></i>\r\n        <span id=\"weatherSummary\">\r\n          {currentWeatherSummary}\r\n        </span>\r\n        <span id=\"weatherScore\" className={getWeatherScoreRatingColor}>\r\n          {covertedScore}\r\n          <span id=\"weatherScoreRating\">\r\n            ({weatherScoreRating})\r\n          </span>\r\n        </span>\r\n        <span id=\"currentUV\">\r\n          UV Index: {currentUV}\r\n        </span>\r\n        <span id=\"currentHumidity\">\r\n          {convertedHumidity}% hum.\r\n        </span>\r\n        {airQuality ?\r\n          <span id=\"airQuality\">\r\n            {airQuality}\r\n            <span id=\"mainParticulate\">\r\n              ({mainPollutant})\r\n            </span>\r\n          </span>\r\n        : null}\r\n        <span id=\"temperature\">\r\n          {formattedTemperature}\r\n        </span>\r\n\r\n        {data ?\r\n\r\n        <p id=\"locationOutput\">\r\n          <span id=\"cityOutput\">{data.city}</span>\r\n          <span id=\"stateOutput\">{data.state}</span>\r\n          <span id=\"countryOutput\">{data.country}</span>\r\n        </p>\r\n\r\n        : null\r\n        }\r\n\r\n      </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\n  export default ScoreData;\r\n","// airvisual api key\r\nexport const apiKey = \"da93f02b-a189-49e0-ab57-af4745f1d319\";\r\n\r\n// dark sky api key\r\nexport const darkskyApiKey = \"7caf9128d134c8a87482de7629abebdf\";\r\n\r\n// google maps api key\r\nexport const gmapsApiKey = \"AIzaSyAGNAWHYmzPtl9h2vVMmLBhlD5o3Et1NCw\";\r\n\r\nexport default { \r\n    apiKey, \r\n    darkskyApiKey, \r\n    gmapsApiKey\r\n};","import React, { Component } from 'react';\r\nimport {Map, Marker, GoogleApiWrapper} from 'google-maps-react';\r\nimport { gmapsApiKey } from '../secrets';\r\n\r\nexport class MapContainer extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    // On render, re-center map by changing state of lat and lng\r\n\r\n    const { currentLat, currentLng } = this.props;\r\n\r\n    this.setState({\r\n      currentLocation: {\r\n        lat: currentLat,\r\n        lng: currentLng\r\n      }\r\n    });\r\n    \r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const { currentLat, currentLng, loaded } = this.props;\r\n\r\n    return (\r\n\r\n      <section id=\"map\">\r\n      \r\n        {loaded ?\r\n\r\n        <Map\r\n          center={{\r\n            lat: currentLat,\r\n            lng: currentLng\r\n          }}\r\n          initialCenter={{\r\n            lat: 38.2527,\r\n            lng: -85.7585\r\n          }}\r\n          google={this.props.google}\r\n          zoom={12}>\r\n\r\n          <Marker\r\n            position={{\r\n              lat: currentLat,\r\n              lng: currentLng\r\n            }}\r\n          />\r\n\r\n        </Map>\r\n        \r\n        : null }\r\n\r\n      </section>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper(\r\n  (props) => ({\r\n    apiKey: gmapsApiKey,\r\n  }\r\n))(MapContainer);\r\n","import React, { Component } from 'react';\r\nimport ClothesData from './ClothesData';\r\nimport ScoreData from './ScoreData';\r\nimport MapContainer from './MapContainer';\r\n\r\nclass Output extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      airQuality,\r\n      currentHumidity,\r\n      currentLat,\r\n      currentLng,\r\n      currentTemp,\r\n      currentUV,\r\n      currentWeatherIcon,\r\n      currentWeatherSummary,\r\n      data,\r\n      dataReceived,\r\n      dataRequested,\r\n      mainPollutant,\r\n      userTempScale,\r\n      userWarmthPreference,\r\n      weatherScore\r\n    } = this.props;\r\n\r\n    return(\r\n\r\n      <section id=\"outputContainer\">\r\n      \r\n      {/* Output section is rendered as loading once data is requested */}\r\n      {/* then renders the clothing list, weather score, and map once data is received */}\r\n\r\n        <section id=\"dataOutput\">\r\n\r\n          { dataRequested ?\r\n          \r\n            <h5>Loading</h5>\r\n            \r\n          : dataReceived ?\r\n\r\n            <ClothesData\r\n              \r\n              currentTemp={currentTemp}\r\n              userWarmthPreference={userWarmthPreference}\r\n\r\n            />\r\n\r\n          :null}\r\n\r\n          { dataRequested ?\r\n          \r\n            <h5>Loading</h5>\r\n          \r\n          : dataReceived ?\r\n\r\n            <ScoreData\r\n\r\n              airQuality={airQuality}\r\n              currentHumidity={currentHumidity}\r\n              currentTemp={currentTemp}\r\n              currentUV={currentUV}\r\n              currentWeatherIcon={currentWeatherIcon}\r\n              currentWeatherSummary={currentWeatherSummary}\r\n              data={data}\r\n              mainPollutant={mainPollutant}\r\n              userTempScale={userTempScale}\r\n              weatherScore={weatherScore}\r\n\r\n            />\r\n\r\n          :null}\r\n\r\n        </section>\r\n\r\n        { dataRequested ?\r\n        \r\n          <h5>Loading</h5>\r\n\r\n        : dataReceived ?\r\n        \r\n          <MapContainer\r\n\r\n            currentLat={currentLat}\r\n            currentLng={currentLng}\r\n  \r\n          />\r\n\r\n        :null}\r\n\r\n      </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Output;\r\n","import React, { Component } from 'react';\r\nimport Form from './Form';\r\nimport Output from './Output';\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      airQuality,\r\n      cityInput,\r\n      cityList,\r\n      countryInput,\r\n      countryList,\r\n      currentHumidity,\r\n      currentLat,\r\n      currentLng,\r\n      currentTemp,\r\n      currentUV,\r\n      currentWeatherIcon,\r\n      currentWeatherSummary,\r\n      data,\r\n      dataReceived,\r\n      dataRequested,\r\n      handleCityInput,\r\n      handleCountryInput,\r\n      handleStateInput,\r\n      handleScaleChange,\r\n      handleWarmthPrefChange,\r\n      getData,\r\n      getLocationData,\r\n      mainPollutant,\r\n      stateInput,\r\n      stateList,\r\n      userTempScale,\r\n      userWarmthPreference,\r\n      weatherScore\r\n    } = this.props;\r\n\r\n    return(\r\n\r\n      <main id=\"main\">\r\n\r\n        <section id=\"formSection\">\r\n\r\n          <section id=\"mainNav\">\r\n            <a href=\"#formSection\"><i className=\"fas fa-angle-double-right fa-2x\" id=\"openNav\"></i></a>\r\n            <a href=\"#top\"><i className=\"fas fa-angle-double-left fa-2x\" id=\"closeNav\"></i></a>\r\n          </section>\r\n          \r\n          {/* User form for options and location input */}\r\n\r\n          <Form\r\n\r\n            cityInput={cityInput}\r\n            cityList={cityList}\r\n            countryInput={countryInput}\r\n            countryList={countryList}\r\n            handleCityInput={handleCityInput}\r\n            handleCountryInput={handleCountryInput}\r\n            handleScaleChange={handleScaleChange}\r\n            handleStateInput={handleStateInput}\r\n            handleWarmthPrefChange={handleWarmthPrefChange}\r\n            getData={getData}\r\n            getLocationData={getLocationData}\r\n            stateInput={stateInput}\r\n            stateList={stateList}\r\n            userTempScale={userTempScale}\r\n            userWarmthPreference={userWarmthPreference}\r\n\r\n          />\r\n\r\n        </section>\r\n        \r\n        {/* Output of clothing and weather data */}\r\n\r\n        <Output\r\n\r\n          airQuality={airQuality}\r\n          currentHumidity={currentHumidity}\r\n          currentLat={currentLat}\r\n          currentLng={currentLng}\r\n          currentTemp={currentTemp}\r\n          currentUV={currentUV}\r\n          currentWeatherIcon={currentWeatherIcon}\r\n          currentWeatherSummary={currentWeatherSummary}\r\n          data={data}\r\n          dataReceived={dataReceived}\r\n          dataRequested={dataRequested}\r\n          mainPollutant={mainPollutant}\r\n          userTempScale={userTempScale}\r\n          userWarmthPreference={userWarmthPreference}\r\n          weatherScore={weatherScore}\r\n\r\n        />\r\n\r\n      </main>\r\n\r\n    );\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {};\r\n  }\r\n  \r\n  render() {\r\n    \r\n    return(\r\n    \r\n      <footer>\r\n\r\n        <span><a href=\"https://darksky.net/poweredby/\">Powered by Dark Sky</a></span>\r\n        <span>2018</span>\r\n        <span><a href=\"#top\">Github</a></span>\r\n\r\n      </footer>\r\n    \r\n    );\r\n    \r\n  }\r\n  \r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport Header from './header';\r\nimport Main from './main';\r\nimport Footer from './Footer';\r\nimport { apiKey, darkskyApiKey } from './secrets';\r\nimport './css/App.css';\r\nimport './css/weather-icons.min.css';\r\n\r\n// App Component Main\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    // Set scales for weather score calculations\r\n\r\n    this.medianTemp = 55;\r\n    this.stdDevTemp = 5;\r\n    this.tempScale = 10;\r\n    this.uvScale = 10;\r\n    this.rainScale = 10;\r\n\r\n    this.state = {\r\n      airQuality: 0,\r\n      cityInput: \"Louisville\",\r\n      cityList: [],\r\n      countryInput: \"USA\",\r\n      countryList: [],\r\n      currentWeatherIcon: \"wi wi-sunny-day\",\r\n      currentLat: 38.2527,\r\n      currentLng: -85.7585,\r\n      currentHumidity: 0,\r\n      currentPrecipProbability: 0,\r\n      currentTemp: 0,\r\n      currentUV: 0,\r\n      data: {},\r\n      dataReceived: false,\r\n      dataRequested: false,\r\n      mainPollutant: \"\",\r\n      stateInput: \"Kentucky\",\r\n      stateList: [],\r\n      userTempScale: \"f\",\r\n      userWarmthPreference: \"neutral\",\r\n      weatherScore: 0\r\n    };\r\n\r\n  }\r\n\r\n  // Calculate weather score\r\n\r\n  calculateWeatherScore = () => {\r\n\r\n    const {\r\n      currentHumidity,\r\n      currentPrecipProbability,\r\n      currentTemp,\r\n      currentUV\r\n    } = this.state;\r\n\r\n    // Calculate scores\r\n\r\n    let humidityScore = currentHumidity * 10;\r\n    let tempScore = this.tempScale - ((Math.abs(this.medianTemp - currentTemp)) / this.stdDevTemp);\r\n    let uvScore = (this.uvScale - currentUV);\r\n    let rainScore = (this.rainScale - (currentPrecipProbability * 10));\r\n\r\n    // Combine scores and average\r\n\r\n    let totalScore = ((tempScore + uvScore + humidityScore + rainScore) / 4);\r\n\r\n    this.setState({\r\n      weatherScore: totalScore,\r\n      dataRequested: false,\r\n      dataReceived: true\r\n    });\r\n\r\n  }\r\n\r\n  // Fetch Dark Sky current weather conditions and calculate weather score\r\n\r\n  fetchCurrentConditions = () => {\r\n\r\n    const {currentLat, currentLng} = this.state;\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.darksky.net/forecast/${darkskyApiKey}/${currentLat},${currentLng}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        console.log(\"Fetch Current Conditions: \", parsedJSON);\r\n        this.setState({\r\n          currentHumidity: parsedJSON.currently.humidity,\r\n          currentPrecipProbability: parsedJSON.currently.precipProbability,\r\n          currentTemp: parsedJSON.currently.apparentTemperature,\r\n          currentUV: parsedJSON.currently.uvIndex,\r\n          currentWeatherIcon: parsedJSON.currently.icon,\r\n          currentWeatherSummary: parsedJSON.currently.summary,\r\n        });\r\n        this.calculateWeatherScore();\r\n      })\r\n      .catch(error => console.log(\"fetchCurrentConditions in App component\", error));\r\n\r\n  }\r\n\r\n  // Populate city, state and county select lists\r\n\r\n  fetchCityList = e => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/cities?state=${e.target.value}&country=${this.state.countryInput}&key=${apiKey}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => parsedJSON.data.map(city => {\r\n        return this.setState({\r\n          cityList: [...this.state.cityList, city.city],\r\n          cityInput: this.state.cityList[0]\r\n        });\r\n      }))\r\n      .catch(error => console.log(\"Fetch city list in App component\", error));\r\n\r\n  }\r\n\r\n  fetchDefaultCityList = (state, country) => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/cities?state=${state}&country=${country}&key=${apiKey}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => parsedJSON.data.map(city => {\r\n        return this.setState({\r\n          cityList: [...this.state.cityList, city.city],\r\n          cityInput: \"Louisville\"\r\n        });\r\n      }))\r\n      .catch(error => console.log(\"Fetch city list in App component\", error));\r\n\r\n  }\r\n\r\n\r\n  fetchStateList = e => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/states?country=${e.target.value}&key=${apiKey}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => parsedJSON.data.map(state => {\r\n        return this.setState({\r\n          stateList: [...this.state.stateList, state.state]\r\n        });\r\n      }))\r\n      .catch(error => console.log(\"Fetch state list in App component\", error));\r\n\r\n  }\r\n\r\n  fetchDefaultStateList = (country) => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/states?country=${country}&key=${apiKey}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => parsedJSON.data.map(state => {\r\n        return this.setState({\r\n          stateList: [...this.state.stateList, state.state],\r\n          stateInput: \"Kentucky\"\r\n        });\r\n      }))\r\n      .catch(error => console.log(\"Fetch state list in App component\", error));\r\n\r\n  }\r\n\r\n  fetchCountryList = () => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/countries?key=${apiKey}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => parsedJSON.data.map(country => {\r\n        return this.setState({\r\n          countryList: [...this.state.countryList, country.country]\r\n        });\r\n      }))\r\n      .catch(error => console.log(\"Fetch country list in App component\", error)\r\n    );\r\n\r\n  }\r\n\r\n  // Get IP based user location data from AirVisual API then fetch current weather conditions\r\n\r\n  fetchLocation = () => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/nearest_city?key=${apiKey}`)\r\n    .then(res => res.json())\r\n    .then(parsedJSON => {\r\n      this.setState({\r\n        airQuality : parsedJSON.data.current.pollution.aqius,\r\n        cityInput: parsedJSON.data.city,\r\n        countryInput: parsedJSON.data.country,\r\n        currentLat: parsedJSON.data.location.coordinates[1],\r\n        currentLng: parsedJSON.data.location.coordinates[0],\r\n        data: parsedJSON.data,\r\n        dataRequested: true,\r\n        mainPollutant: parsedJSON.data.current.pollution.mainus,\r\n        stateInput: parsedJSON.data.state\r\n      });\r\n      this.fetchCurrentConditions();\r\n    })\r\n    .catch(error => console.log(\"fetchLocation in App component\", error));\r\n\r\n  }\r\n\r\n  // Fetch user input location weather data fro AirVisual API then fetch current weather condiditons\r\n\r\n  fetchStd = () => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/city?city=${this.state.cityInput}&state=${this.state.stateInput}&country=${this.state.countryInput}&key=${apiKey}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        this.setState({\r\n          currentLat: parsedJSON.data.location.coordinates[1],\r\n          currentLng: parsedJSON.data.location.coordinates[0],\r\n          dataRequested: true,\r\n          data: parsedJSON.data,\r\n          airQuality : parsedJSON.data.current.pollution.aqius,\r\n          mainPollutant: parsedJSON.data.current.pollution.mainus\r\n        });\r\n        this.fetchCurrentConditions();\r\n      })\r\n      .catch(error => console.log(\"fetchStd in App component\", error));\r\n\r\n  }\r\n\r\n  // Handle user input location form submission\r\n\r\n  getData = e => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      cityInput: this.state.cityInput,\r\n      stateinput: this.state.stateInput,\r\n      countryInput: this.state.countryInput,\r\n    });\r\n\r\n    this.fetchStd();\r\n\r\n  }\r\n\r\n  // Handle button click for IP based user location\r\n\r\n  getLocationData = e => {\r\n    e.preventDefault();\r\n\r\n    this.fetchLocation();\r\n\r\n  }\r\n\r\n  // Handle change in county, state, city select options and populate select options\r\n\r\n  handleCityInput = e => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      cityInput: e.target.value\r\n    });\r\n\r\n  }\r\n\r\n  loadDefaultCountry = () => {\r\n\r\n    this.setState({\r\n      countryInput: \"USA\",\r\n    });\r\n    this.fetchDefaultStateList(\"USA\");\r\n    this.loadDefaultState();\r\n\r\n  }\r\n\r\n  loadDefaultState = () => {\r\n\r\n    this.setState({\r\n      stateInput: \"Kentucky\"\r\n    });\r\n\r\n    this.fetchDefaultCityList(\"Kentucky\", \"USA\");\r\n\r\n    this.loadDefaultCity();\r\n\r\n  }\r\n\r\n  loadDefaultCity = () => {\r\n\r\n    this.setState({\r\n      cityInput: \"Louisville\"\r\n    });\r\n\r\n  }\r\n\r\n  handleCountryInput = e => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      countryInput: e.target.value,\r\n      cityInput: \"\",\r\n      cityList: [],\r\n      stateInput: \"\",\r\n      stateList: []\r\n    });\r\n    this.fetchStateList(e);\r\n\r\n  }\r\n\r\n  handleStateInput = e => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      stateInput: e.target.value,\r\n      cityInput: \"\",\r\n      cityList: []\r\n    });\r\n    this.fetchCityList(e);\r\n\r\n  }\r\n\r\n  handleScaleChange = e => {\r\n    this.setState({\r\n      userTempScale: e.target.value\r\n    });\r\n  }\r\n\r\n  handleWarmthPrefChange = e => {\r\n    this.setState({\r\n      userWarmthPreference: e.target.value\r\n    });\r\n\r\n  }\r\n\r\n\r\n  // Populate selects with country, state, and city data\r\n\r\n  componentDidMount() {\r\n\r\n    this.fetchCountryList();\r\n\r\n    this.loadDefaultCountry();\r\n\r\n    console.log(\"App component mounted state:\", this.state);\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      airQuality,\r\n      cityInput,\r\n      cityList,\r\n      countryInput,\r\n      countryList,\r\n      currentHumidity,\r\n      currentLat,\r\n      currentLng,\r\n      currentTemp,\r\n      currentUV,\r\n      currentWeatherIcon,\r\n      currentWeatherSummary,\r\n      data,\r\n      dataReceived,\r\n      dataRequested,\r\n      mainPollutant,\r\n      stateInput,\r\n      stateList,\r\n      userTempScale,\r\n      userWarmthPreference,\r\n      weatherScore\r\n    } = this.state;\r\n\r\n    return (\r\n\r\n      <div className=\"App\">\r\n\r\n        <Header/>\r\n\r\n        <Main\r\n\r\n          airQuality={airQuality}\r\n          cityInput={cityInput}\r\n          cityList={cityList}\r\n          countryInput={countryInput}\r\n          countryList={countryList}\r\n          currentHumidity={currentHumidity}\r\n          currentLat={currentLat}\r\n          currentLng={currentLng}\r\n          currentTemp={currentTemp}\r\n          currentUV={currentUV}\r\n          currentWeatherIcon={currentWeatherIcon}\r\n          currentWeatherSummary={currentWeatherSummary}\r\n          data={data}\r\n          dataReceived={dataReceived}\r\n          dataRequested={dataRequested}\r\n          getData={this.getData}\r\n          getLocationData={this.getLocationData}\r\n          handleCityInput={this.handleCityInput}\r\n          handleCountryInput={this.handleCountryInput}\r\n          handleStateInput={this.handleStateInput}\r\n          handleScaleChange={this.handleScaleChange}\r\n          handleWarmthPrefChange={this.handleWarmthPrefChange}\r\n          mainPollutant={mainPollutant}\r\n          stateInput={stateInput}\r\n          stateList={stateList}\r\n          userTempScale={userTempScale}\r\n          userWarmthPreference={userWarmthPreference}\r\n          weatherScore={weatherScore}\r\n\r\n        />\r\n\r\n        <Footer />\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport { darkskyApiKey } from './secrets';\r\nimport ScoreData from './main/ScoreData';\r\nimport Header from './header';\r\nimport Footer from './Footer';\r\n\r\nclass Scheduler extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.d = new Date();\r\n\r\n    this.days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n\r\n    this.medianTemp = 55;\r\n    this.stdDevTemp = 5;\r\n    this.tempScale = 10;\r\n    this.uvScale = 10;\r\n    this.rainScale = 10;\r\n\r\n    this.state = {\r\n      currentDayName: this.days[this.d.getDay()],\r\n      currentDayIndex: this.d.getDay(),\r\n      selectedDayName: this.days[this.d.getDay()],\r\n      selectedDayIndex: 0,\r\n      deltaSelectedDay: 0,\r\n      currentLat: 38.2527,\r\n      currentLng: -85.7585,\r\n      forcastHumidity: [],\r\n      forcastTempHigh: [],\r\n      forcastTempLow: [],\r\n      forcastTime: [],\r\n      forcastUV: [],\r\n      forcastPrecipProbability: [],\r\n      forcastWeatherScores: [],\r\n      forcastWeatherIcon: \"wi wi-na\",\r\n      forcastWeatherSummary: \"\",\r\n      isDaySelected: false,\r\n      selectedDayAQ: 0,\r\n      selectedDayHumidity: 0,\r\n      selectedDayIsRaning: 0,\r\n      selectedDayTempHigh: 0,\r\n      selectedDayTempLow: 0,\r\n      selectedDayAveragedTemp: 0,\r\n      selectedDayUV: 0,\r\n      selectedDayWeatherSummary: \"\",\r\n      selectedDayData: false,\r\n      selectedDayMainPollutant: \"\",\r\n      selectedDayUserTempScale: \"f\",\r\n      selectedDayWeatherIcon: \"wi wi-na\",\r\n      selectedDayWeatherScore: 0\r\n\r\n    };\r\n  }\r\n\r\n  // Calculate weather score\r\n\r\n  calculateWeatherScore = () => {\r\n\r\n    const {\r\n      selectedDayHumidity,\r\n      selectedDayPrecipProbability,\r\n      selectedDayTempHigh,\r\n      selectedDayTempLow,\r\n      selectedDayUV\r\n    } = this.state;\r\n\r\n    // Normalize data for display\r\n\r\n    let humidityScore = selectedDayHumidity * 10;\r\n    let averagedTemp = (selectedDayTempHigh + selectedDayTempLow) / 2;\r\n    let tempScore = this.tempScale - ((Math.abs(this.medianTemp - averagedTemp)) / this.stdDevTemp);\r\n    let uvScore = (this.uvScale - selectedDayUV);\r\n    let rainScore = (this.rainScale - (selectedDayPrecipProbability * 10));\r\n\r\n    let totalScore = ((tempScore + uvScore + humidityScore + rainScore) / 4);\r\n\r\n    this.setState({\r\n      selectedDayWeatherScore: totalScore,\r\n      selectedDayAveragedTemp: averagedTemp\r\n    });\r\n\r\n  }\r\n\r\n  // Calculate each day's weather score and push to array then find the best day to run\r\n\r\n  calcuateWeatherScoresByDay = () => {\r\n\r\n    const {\r\n      forcastHumidity,\r\n      forcastPrecipProbability,\r\n      forcastTempHigh,\r\n      forcastTempLow,\r\n      forcastUV,\r\n    } = this.state;\r\n\r\n    const scoresArray = [];\r\n\r\n    for(let i=0; i <=7; i++) {\r\n\r\n      let humidityScore = forcastHumidity[i] * 10;\r\n      let averagedTemp = (forcastTempHigh[i] + forcastTempLow[i]) / 2;\r\n      let tempScore = this.tempScale - ((Math.abs(this.medianTemp - averagedTemp)) / this.stdDevTemp);\r\n      let uvScore = (this.uvScale - forcastUV[i]);\r\n      let rainScore = (this.rainScale - (forcastPrecipProbability[i] * 10));\r\n\r\n      let totalScore = ((tempScore + uvScore + humidityScore + rainScore) / 4);\r\n\r\n      scoresArray.push(totalScore);\r\n\r\n    }\r\n\r\n    this.setState({\r\n        forcastWeatherScores: scoresArray\r\n      });\r\n\r\n  }\r\n\r\n  // Fetch forcast data and call weather score calculator\r\n\r\n  fetchForcast = () => {\r\n\r\n    const {currentLat, currentLng} = this.state;\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.darksky.net/forecast/${darkskyApiKey}/${currentLat},${currentLng}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        this.setState({\r\n          forcastHumidity: parsedJSON.daily.data.map(d => d.humidity),\r\n          forcastPrecipProbability: parsedJSON.daily.data.map(d => d.precipProbability),\r\n          forcastTempHigh: parsedJSON.daily.data.map(d => d.apparentTemperatureHigh),\r\n          forcastTempLow: parsedJSON.daily.data.map(d => d.apparentTemperatureLow),\r\n          forcastUV: parsedJSON.daily.data.map(d => d.uvIndex),\r\n          forcastIsRaning: parsedJSON.daily.data.map(d => d.precipProbability),\r\n          forcastTime: parsedJSON.daily.data.map(d => d.sunriseTime),\r\n          forcastWeatherIcon: parsedJSON.daily.data.map(d => d.icon),\r\n          forcastWeatherSummary: parsedJSON.daily.data.map(d => d.summary)\r\n        });\r\n        this.calcuateWeatherScoresByDay();\r\n      })\r\n      .catch(error => console.log(`fetchForcast error in Scheduler: ${error}`));\r\n\r\n  }\r\n\r\n  // Fetch day data and then call weather score calculator\r\n\r\n  fetchForcastBySelectedDay = () => {\r\n\r\n    const {currentLat, currentLng, selectedDayIndex} = this.state;\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.darksky.net/forecast/${darkskyApiKey}/${currentLat},${currentLng}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        this.setState({\r\n          selectedDayHumidity: parsedJSON.daily.data[selectedDayIndex].humidity,\r\n          selectedDayPrecipProbability: parsedJSON.daily.data[selectedDayIndex].precipProbability,\r\n          selectedDayTempHigh: parsedJSON.daily.data[selectedDayIndex].apparentTemperatureHigh,\r\n          selectedDayTempLow: parsedJSON.daily.data[selectedDayIndex].apparentTemperatureLow,\r\n          selectedDayUV: parsedJSON.daily.data[selectedDayIndex].uvIndex,\r\n          selectedDayIsRaning: parsedJSON.daily.data[selectedDayIndex].precipProbability,\r\n          selectedDayWeatherIcon: parsedJSON.daily.data[selectedDayIndex].icon,\r\n          selectedDayWeatherSummary: parsedJSON.daily.data[selectedDayIndex].summary,\r\n          isDaySelected: true\r\n        });\r\n        this.calculateWeatherScore();\r\n      })\r\n      .catch(error => console.log(`fetchForcastBySelectedDay error in Scheduler: ${error}`));\r\n\r\n  }\r\n\r\n  handleDayChange = e => {\r\n    e.preventDefault();\r\n\r\n    let selectedDayIndex = e.target.value === \"Sunday\"\r\n      ? 0\r\n      : e.target.value === \"Monday\"\r\n      ? 1\r\n      : e.target.value === \"Tuesday\"\r\n      ? 2\r\n      : e.target.value === \"Wednesday\"\r\n      ? 3\r\n      : e.target.value === \"Thursday\"\r\n      ? 4\r\n      : e.target.value === \"Friday\"\r\n      ? 5\r\n      : e.target.value === \"Saturday\"\r\n      ? 6\r\n      : null;\r\n\r\n    this.setState({\r\n      selectedDayName: e.target.value,\r\n      selectedDayIndex: selectedDayIndex,\r\n    });\r\n\r\n    this.getDeltaSelectedDay();\r\n\r\n  }\r\n\r\n  // Get difference in index between selected day and current day to find index to get data\r\n  // selected day index in data array is relative to current day of index 0\r\n\r\n  getDeltaSelectedDay = () => {\r\n\r\n    const { selectedDayIndex, currentDayIndex } = this.state;\r\n\r\n    let dayScale = 7;\r\n\r\n    this.setState({\r\n\r\n      deltaSelectedDay: currentDayIndex < selectedDayIndex\r\n      ? (selectedDayIndex - currentDayIndex)\r\n      : currentDayIndex > selectedDayIndex\r\n      ? (dayScale - (currentDayIndex - selectedDayIndex))\r\n      : currentDayIndex === selectedDayIndex\r\n      ? 0\r\n      : null\r\n\r\n    },\r\n    this.fetchForcastBySelectedDay()\r\n    );\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"Scheduler component mount state: \", this.state);\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      isDaySelected,\r\n      selectedDayName,\r\n      selectedDayAQ,\r\n      selectedDayHumidity,\r\n      selectedDayAveragedTemp,\r\n      selectedDayUV,\r\n      selectedDayWeatherIcon,\r\n      selectedDayWeatherSummary,\r\n      selectedDayData,\r\n      selectedDayMainPollutant,\r\n      selectedDayUserTempScale,\r\n      selectedDayWeatherScore\r\n    } = this.state;\r\n\r\n    return(\r\n\r\n        <section id=\"schedulerSection\">\r\n\r\n            <Header />\r\n\r\n            <section id=\"scheduler\" className=\"column\">\r\n\r\n                <h2>Scheduler</h2>\r\n\r\n                <p>Pick a day to get information or find the best day in the next week</p>\r\n\r\n                <label>Pick a day of the week</label>\r\n                <select value={selectedDayName} onChange={this.handleDayChange}>\r\n                  <option value=\"Sunday\">Sunday</option>\r\n                  <option value=\"Monday\">Monday</option>\r\n                  <option value=\"Tuesday\">Tuesday</option>\r\n                  <option value=\"Wednesday\">Wednesday</option>\r\n                  <option value=\"Thursday\">Thursday</option>\r\n                  <option value=\"Friday\">Friday</option>\r\n                  <option value=\"Saturday\">Saturday</option>\r\n                </select>\r\n\r\n                {isDaySelected ?\r\n\r\n                    <ScoreData\r\n\r\n                      airQuality={selectedDayAQ}\r\n                      currentHumidity={selectedDayHumidity}\r\n                      currentTemp={selectedDayAveragedTemp}\r\n                      currentUV={selectedDayUV}\r\n                      currentWeatherIcon={selectedDayWeatherIcon}\r\n                      currentWeatherSummary={selectedDayWeatherSummary}\r\n                      data={selectedDayData}\r\n                      mainPollutant={selectedDayMainPollutant}\r\n                      selectedDayName={selectedDayName}\r\n                      userTempScale={selectedDayUserTempScale}\r\n                      weatherScore={selectedDayWeatherScore}\r\n                    />\r\n\r\n                : null\r\n\r\n                }\r\n\r\n            </section>\r\n\r\n            <Footer / >\r\n\r\n        </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\n  export default Scheduler;\r\n","import React, { Component } from 'react';\r\nimport { darkskyApiKey } from './secrets';\r\nimport ScoreData from './main/ScoreData';\r\nimport Header from './header';\r\nimport Footer from './Footer';\r\n\r\nclass BestDay extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.d = new Date();\r\n\r\n    this.days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n\r\n    this.medianTemp = 55;\r\n    this.stdDevTemp = 5;\r\n    this.tempScale = 10;\r\n    this.uvScale = 10;\r\n    this.rainScale = 10;\r\n\r\n    this.state = {\r\n      bestDay: null,\r\n      bestDayIndex: null,\r\n      bestDayFound: false,\r\n      currentDayName: this.days[this.d.getDay()],\r\n      currentDayIndex: this.d.getDay(),\r\n      selectedDayIndex: null,\r\n      deltaSelectedDay: null,\r\n      currentLat: 38.2527,\r\n      currentLng: -85.7585,\r\n      forcastHumidity: [],\r\n      forcastTempHigh: [],\r\n      forcastTempLow: [],\r\n      forcastTime: [],\r\n      forcastUV: [],\r\n      forcastPrecipProbability: [],\r\n      forcastWeatherScores: [],\r\n      forcastWeatherIcon: \"wi wi-na\",\r\n      forcastWeatherSummary: \"\",\r\n      isDaySelected: false,\r\n      selectedDayAQ: 0,\r\n      selectedDayHumidity: 0,\r\n      selectedDayIsRaning: 0,\r\n      selectedDayTempHigh: 0,\r\n      selectedDayTempLow: 0,\r\n      selectedDayAveragedTemp: 0,\r\n      selectedDayUV: 0,\r\n      selectedDayWeatherSummary: \"\",\r\n      selectedDayData: false,\r\n      selectedDayMainPollutant: \"\",\r\n      selectedDayUserTempScale: \"f\",\r\n      selectedDayWeatherIcon: \"wi wi-na\",\r\n      selectedDayWeatherScore: 0\r\n\r\n    };\r\n  }\r\n\r\n  // Calculate weather score\r\n\r\n  calculateWeatherScore = () => {\r\n\r\n    const {\r\n      selectedDayHumidity,\r\n      selectedDayPrecipProbability,\r\n      selectedDayTempHigh,\r\n      selectedDayTempLow,\r\n      selectedDayUV\r\n    } = this.state;\r\n\r\n    // Set scales and defaults\r\n\r\n    // Normalize data for display\r\n\r\n    let humidityScore = selectedDayHumidity * 10;\r\n    let averagedTemp = (selectedDayTempHigh + selectedDayTempLow) / 2;\r\n    let tempScore = this.tempScale - ((Math.abs(this.medianTemp - averagedTemp)) / this.stdDevTemp);\r\n    let uvScore = (this.uvScale - selectedDayUV);\r\n    let rainScore = (this.rainScale - (selectedDayPrecipProbability * 10));\r\n\r\n    let totalScore = ((tempScore + uvScore + humidityScore + rainScore) / 4);\r\n\r\n    this.setState({\r\n      selectedDayWeatherScore: totalScore,\r\n      selectedDayAveragedTemp: averagedTemp\r\n    });\r\n\r\n  }\r\n\r\n  findBestDayToRun = () => {\r\n\r\n    const {\r\n      forcastTime,\r\n      forcastWeatherScores\r\n    } = this.state;\r\n\r\n    // Get highest score in 7 day range from api data\r\n\r\n    let index = forcastWeatherScores.indexOf(Math.max(...forcastWeatherScores));\r\n\r\n    // Convert millisecond time to date then to day of week index\r\n\r\n    let date = new Date(forcastTime[index] * 1000);\r\n\r\n    let convertedDate = new Date(date);\r\n\r\n    let bestDayIndex = convertedDate.getDay();\r\n\r\n    // Get day name from index\r\n\r\n    let bestDay =\r\n\r\n      bestDayIndex === 0\r\n      ? 'Sunday'\r\n      : bestDayIndex === 1\r\n      ? 'Monday'\r\n      : bestDayIndex === 2\r\n      ? 'Tuesday'\r\n      : bestDayIndex === 3\r\n      ? 'Wednesday'\r\n      : bestDayIndex === 4\r\n      ? 'Thursday'\r\n      : bestDayIndex === 5\r\n      ? 'Friday'\r\n      : bestDayIndex === 6\r\n      ? 'Saturday'\r\n      : null;\r\n\r\n      this.setState({\r\n        bestDay: bestDay,\r\n        bestDayIndex: bestDayIndex,\r\n        bestDayFound: true,\r\n      });\r\n\r\n      this.getDeltaBestDay();\r\n\r\n      this.fetchForcastBySelectedDay();\r\n\r\n  }\r\n\r\n  // Calculate each day's weather score and push to array then find the best day to run\r\n\r\n  calcuateWeatherScoresByDay = () => {\r\n\r\n    const {\r\n      forcastHumidity,\r\n      forcastPrecipProbability,\r\n      forcastTempHigh,\r\n      forcastTempLow,\r\n      forcastUV,\r\n    } = this.state;\r\n\r\n    const scoresArray = [];\r\n\r\n    for(let i=0; i <=7; i++) {\r\n\r\n      let humidityScore = forcastHumidity[i] * 10;\r\n      let averagedTemp = (forcastTempHigh[i] + forcastTempLow[i]) / 2;\r\n      let tempScore = this.tempScale - ((Math.abs(this.medianTemp - averagedTemp)) / this.stdDevTemp);\r\n      let uvScore = (this.uvScale - forcastUV[i]);\r\n      let rainScore = (this.rainScale - (forcastPrecipProbability[i] * 10));\r\n\r\n      let totalScore = ((tempScore + uvScore + humidityScore + rainScore) / 4);\r\n\r\n      scoresArray.push(totalScore);\r\n\r\n    }\r\n\r\n    this.setState({\r\n        forcastWeatherScores: scoresArray\r\n      });\r\n\r\n    this.findBestDayToRun();\r\n\r\n  }\r\n\r\n  // Fetch forcast data and call weather score calculator\r\n\r\n  fetchForcast = () => {\r\n\r\n    const {currentLat, currentLng} = this.state;\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.darksky.net/forecast/${darkskyApiKey}/${currentLat},${currentLng}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        this.setState({\r\n          forcastHumidity: parsedJSON.daily.data.map(d => d.humidity),\r\n          forcastPrecipProbability: parsedJSON.daily.data.map(d => d.precipProbability),\r\n          forcastTempHigh: parsedJSON.daily.data.map(d => d.apparentTemperatureHigh),\r\n          forcastTempLow: parsedJSON.daily.data.map(d => d.apparentTemperatureLow),\r\n          forcastUV: parsedJSON.daily.data.map(d => d.uvIndex),\r\n          forcastIsRaning: parsedJSON.daily.data.map(d => d.precipProbability),\r\n          forcastTime: parsedJSON.daily.data.map(d => d.sunriseTime),\r\n          forcastWeatherIcon: parsedJSON.daily.data.map(d => d.icon),\r\n          forcastWeatherSummary: parsedJSON.daily.data.map(d => d.summary)\r\n        });\r\n        this.calcuateWeatherScoresByDay();\r\n      })\r\n      .catch(error => console.log(`fetchForcas error in Best Day: ${error}`));\r\n\r\n  }\r\n\r\n  // Fetch day data and then call weather score calculator\r\n\r\n  fetchForcastBySelectedDay = () => {\r\n\r\n    const {currentLat, currentLng, selectedDayIndex} = this.state;\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.darksky.net/forecast/${darkskyApiKey}/${currentLat},${currentLng}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        this.setState({\r\n          selectedDayHumidity: parsedJSON.daily.data[selectedDayIndex].humidity,\r\n          selectedDayPrecipProbability: parsedJSON.daily.data[selectedDayIndex].precipProbability,\r\n          selectedDayTempHigh: parsedJSON.daily.data[selectedDayIndex].apparentTemperatureHigh,\r\n          selectedDayTempLow: parsedJSON.daily.data[selectedDayIndex].apparentTemperatureLow,\r\n          selectedDayUV: parsedJSON.daily.data[selectedDayIndex].uvIndex,\r\n          selectedDayIsRaning: parsedJSON.daily.data[selectedDayIndex].precipProbability,\r\n          selectedDayWeatherIcon: parsedJSON.daily.data[selectedDayIndex].icon,\r\n          selectedDayWeatherSummary: parsedJSON.daily.data[selectedDayIndex].summary\r\n        });\r\n        this.calculateWeatherScore();\r\n      })\r\n      .catch(error => console.log(`fetchForcastBySelectedDay error in Best Day: ${error}`));\r\n\r\n  }\r\n\r\n  // Get difference in index between best day and current day to find index to get data\r\n  // best day index in data array is relative to current day of index 0\r\n\r\n  getDeltaBestDay = () => {\r\n\r\n    const { bestDayIndex, currentDayIndex } = this.state;\r\n\r\n    let deltaBestDay = (bestDayIndex - currentDayIndex);\r\n\r\n    this.setState({\r\n      selectedDayIndex: deltaBestDay\r\n    });\r\n\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    console.log(\"Best Day mounted state: \", this.state);\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      bestDay,\r\n      bestDayFound,\r\n      selectedDayAQ,\r\n      selectedDayHumidity,\r\n      selectedDayAveragedTemp,\r\n      selectedDayUV,\r\n      selectedDayWeatherIcon,\r\n      selectedDayWeatherSummary,\r\n      selectedDayData,\r\n      selectedDayMainPollutant,\r\n      selectedDayUserTempScale,\r\n      selectedDayWeatherScore\r\n    } = this.state;\r\n\r\n    return(\r\n\r\n        <section id=\"schedulerSection\">\r\n\r\n            <Header />\r\n\r\n            <section id=\"bestDay\" className=\"column\">\r\n\r\n              <h2>Best Day</h2>\r\n\r\n              <p>Find the best day to run in the next 7 days</p>\r\n\r\n\r\n              <label>Find the best day of the week</label>\r\n              <button\r\n                onClick={this.fetchForcast}\r\n              >\r\n                Go\r\n              </button>\r\n\r\n              {bestDayFound ?\r\n\r\n                  <ScoreData\r\n\r\n                    airQuality={selectedDayAQ}\r\n                    bestDay={bestDay}\r\n                    currentHumidity={selectedDayHumidity}\r\n                    currentTemp={selectedDayAveragedTemp}\r\n                    currentUV={selectedDayUV}\r\n                    currentWeatherIcon={selectedDayWeatherIcon}\r\n                    currentWeatherSummary={selectedDayWeatherSummary}\r\n                    data={selectedDayData}\r\n                    mainPollutant={selectedDayMainPollutant}\r\n                    userTempScale={selectedDayUserTempScale}\r\n                    weatherScore={selectedDayWeatherScore}\r\n                  />\r\n\r\n              : null\r\n\r\n              }\r\n\r\n            </section>\r\n\r\n            <Footer / >\r\n\r\n        </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\n  export default BestDay;\r\n","import React, { Component } from 'react';\r\nimport { darkskyApiKey } from './secrets';\r\nimport ScoreData from './main/ScoreData';\r\nimport Header from './header';\r\nimport Footer from './Footer';\r\n\r\nclass Forcast extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.d = new Date();\r\n\r\n    // repeated days to get 7 days out from any selected day (i.e. Saturday to Sunday)\r\n    \r\n    this.days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\"\r\n    ];\r\n\r\n    this.medianTemp = 55;\r\n    this.stdDevTemp = 5;\r\n    this.tempScale = 10;\r\n    this.uvScale = 10;\r\n    this.rainScale = 10;\r\n\r\n    this.state = {\r\n      currentDayName: this.days[this.d.getDay()],\r\n      currentDayIndex: this.d.getDay(),\r\n      currentLat: 38.2527,\r\n      currentLng: -85.7585,\r\n      forcastAveragedTemp: [],\r\n      forcastDayNames: [],\r\n      forcastHumidity: [],\r\n      forcastPrecipProbability: [],\r\n      forcastTempHigh: [],\r\n      forcastTempLow: [],\r\n      forcastTime: [],\r\n      forcastUV: [],\r\n      forcastWeatherIcons: [],\r\n      forcastWeatherScores: [],\r\n      forcastWeatherSummary: [],\r\n      isDataReceived: false,\r\n      isDataRequested: false,\r\n      userTempScale: 'f'\r\n\r\n    };\r\n  }\r\n\r\n  // Calculate each day's weather score and push to array then find the best day to run\r\n\r\n  calcuateWeatherScoresByDay = () => {\r\n\r\n    const {\r\n      forcastHumidity,\r\n      forcastTempHigh,\r\n      forcastTempLow,\r\n      forcastUV,\r\n      forcastPrecipProbability\r\n    } = this.state;\r\n\r\n    const scoresArray = [];\r\n    \r\n    const averagedTempArray = [];\r\n\r\n    for(let i = 0; i <= 7; i++) {\r\n\r\n      let humidityScore = forcastHumidity[i] * 10;\r\n      let averagedTemp = (forcastTempHigh[i] + forcastTempLow[i]) / 2;\r\n      let tempScore = this.tempScale - ((Math.abs(this.medianTemp - averagedTemp)) / this.stdDevTemp);\r\n      let uvScore = (this.uvScale - forcastUV[i]);\r\n      let rainScore = (this.rainScale - (forcastPrecipProbability[i] * 10));\r\n\r\n      let totalScore = ((tempScore + uvScore + humidityScore + rainScore) / 4);\r\n\r\n      averagedTempArray.push(averagedTemp);\r\n\r\n      scoresArray.push(totalScore);\r\n\r\n    }\r\n\r\n    this.setState({\r\n      forcastWeatherScores: scoresArray,\r\n      forcastAveragedTemp: averagedTempArray,\r\n      isDataRequested: false,\r\n      isDataReceived: true\r\n    });\r\n    \r\n  }\r\n\r\n  // Fetch forcast data, set day names array, and calculate weather scores\r\n\r\n  fetchForcast = () => {\r\n\r\n    const {currentLat, currentLng} = this.state;\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.darksky.net/forecast/${darkskyApiKey}/${currentLat},${currentLng}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        this.setState({\r\n          forcastHumidity: parsedJSON.daily.data.map(d => d.humidity),\r\n          forcastPrecipProbability: parsedJSON.daily.data.map(d => d.precipProbability),\r\n          forcastTempHigh: parsedJSON.daily.data.map(d => d.apparentTemperatureHigh),\r\n          forcastTempLow: parsedJSON.daily.data.map(d => d.apparentTemperatureLow),\r\n          forcastUV: parsedJSON.daily.data.map(d => d.uvIndex),\r\n          forcastIsRaning: parsedJSON.daily.data.map(d => d.precipProbability),\r\n          forcastTime: parsedJSON.daily.data.map(d => d.sunriseTime),\r\n          forcastWeatherIcons: parsedJSON.daily.data.map(d => d.icon),\r\n          forcastWeatherSummary: parsedJSON.daily.data.map(d => d.summary),\r\n          isDataRequested: true\r\n        });\r\n        this.getForcastDayNames();\r\n        this.calcuateWeatherScoresByDay();\r\n      })\r\n      .catch(error => console.log(`fetchForcast error in Scheduler: ${error}`));\r\n\r\n  }\r\n  \r\n  // Create array of day names starting with the current day of the week\r\n  \r\n  getForcastDayNames = () => {\r\n    \r\n    const { forcastDayNames } = this.state;\r\n    \r\n    for(let i = 0; i < 7 ; i++) {\r\n      forcastDayNames[i] = this.days[(this.d.getDay() + i)];\r\n    }\r\n    \r\n  }\r\n  \r\n  getForcastScores = () => {\r\n    \r\n    const {\r\n      forcastHumidity,\r\n      forcastAveragedTemp,\r\n      forcastUV,\r\n      forcastWeatherIcons,\r\n      forcastWeatherSummary,\r\n      forcastDayNames,\r\n      userTempScale,\r\n      forcastWeatherScores\r\n    } = this.state;\r\n    \r\n    let scoreBoard = [];\r\n    \r\n    let scoreData = [];\r\n    \r\n    for (let i = 0; i < 7; i++) {\r\n      \r\n      scoreData.push(\r\n        \r\n          <ScoreData\r\n            key={i}\r\n            currentHumidity={forcastHumidity[i]}\r\n            currentTemp={forcastAveragedTemp[i]}\r\n            currentUV={forcastUV[i]}\r\n            currentWeatherIcon={forcastWeatherIcons[i]}\r\n            currentWeatherSummary={forcastWeatherSummary[i]}\r\n            forcastDayName={forcastDayNames[i]}\r\n            userTempScale={userTempScale}\r\n            weatherScore={forcastWeatherScores[i]}\r\n          />\r\n      )\r\n      \r\n    }\r\n    \r\n    scoreBoard.push(scoreData);\r\n    \r\n    return scoreBoard;\r\n    \r\n  }\r\n  \r\n  componentWillMount() {\r\n    \r\n    this.fetchForcast();\r\n\r\n  }\r\n\r\n  render() {\r\n    \r\n    const {\r\n      isDataRequested,\r\n      isDataReceived\r\n    } = this.state;\r\n\r\n    return(\r\n\r\n        <section id=\"forcastSection\">\r\n\r\n            <Header/>\r\n\r\n            <section id=\"sevenDayForcast\" className=\"column\">\r\n\r\n                <h2>7 Day Forcast</h2>\r\n                \r\n                {/* Render ul once data is received */}\r\n\r\n                { isDataRequested ?\r\n                \r\n                  <h3>Loading...</h3>\r\n                \r\n                : isDataReceived ?\r\n\r\n                <ul>\r\n\r\n                  {this.getForcastScores()}\r\n                  \r\n                </ul>\r\n\r\n                : null }\r\n\r\n            </section>\r\n\r\n            <Footer / >\r\n\r\n        </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\n  export default Forcast;\r\n","import React, { Component } from 'react';\r\nimport Header from './header';\r\nimport Footer from './Footer';\r\n\r\nclass About extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n\r\n    return(\r\n\r\n        <section id=\"aboutSection\">\r\n\r\n            <Header />\r\n\r\n            <section id=\"about\" className=\"column\">\r\n\r\n                <h2>About</h2>\r\n\r\n                <p>Get a rating on weather conditions for outdoor activities</p>\r\n\r\n                <a href=\"https://jbratcher.github.io/ShouldIRun/\" class=\"button\">Demo page</a>\r\n\r\n            </section>\r\n\r\n            <Footer / >\r\n\r\n        </section>\r\n\r\n    )\r\n\r\n  }\r\n\r\n}\r\n\r\n  export default About;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport Scheduler from './Scheduler';\r\nimport BestDay from './BestDay';\r\nimport Forcast from './Forcast';\r\nimport About from './About';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(\r\n                <Router basename={process.env.PUBLIC_URL}> \r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={ App }/> \r\n                        \r\n                        {/* props passed to top level routes */ }\r\n                        \r\n                        <Route\r\n                            exact path='/scheduler'\r\n                            render={(props) => <Scheduler {...props} />}\r\n                        />\r\n                        <Route\r\n                            exact path='/bestday'\r\n                            render={(props) => <BestDay {...props} />}\r\n                        />\r\n                        <Route\r\n                            exact path='/forcast'\r\n                            render={(props) => <Forcast {...props} />}\r\n                        />\r\n                        <Route\r\n                            exact path='/about'\r\n                            render={(props) => <About {...props} />}\r\n                        />\r\n                    </Switch>\r\n                </Router>, \r\n                document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}