{"version":3,"sources":["header/index.js","main/UserOptions.js","main/LocationInput.js","main/Form.js","data/Clothing.js","main/ClothesData.js","main/ScoreData.js","secrets.js","main/MapContainer.js","main/Output.js","main/index.js","Footer.js","App.js","Scheduler.js","BestDay.js","Forecast.js","About.js","registerServiceWorker.js","index.js"],"names":["Header","Component","constructor","props","super","this","state","render","id","Link","to","href","className","aria-hidden","UserOptions","handleScaleChange","handleWarmthPrefChange","userTempScale","userWarmthPreference","value","onChange","LocationInput","cityList","cityInput","countryInput","countryList","getData","handleCityInput","handleCountryInput","handleStateInput","getLocationData","stateInput","stateList","onClick","htmlFor","map","country","i","key","city","type","name","Form","Clothing","cold","head","text","imgsrc","torso","legs","feet","chilly","neutral","warm","hot","ClothesData","getCurrentTempIndex","currentTemp","setState","currentTempIndex","calculateWarmthPrefernce","tempIndexCalculated","componentDidMount","alt","src","ScoreData","airQuality","bestDay","currentHumidity","currentUV","currentWeatherIcon","currentWeatherSummary","data","forecastDayName","mainPollutant","selectedDayName","weatherScore","formattedTemperatureScale","toUpperCase","formattedTemperature","parseInt","covertedScore","toFixed","convertedHumidity","getWeatherIcon","weatherScoreRating","getWeatherScoreRatingColor","airVisualApiKey","darkskyApiKey","gmapsApiKey","MapContainer","currentLat","currentLng","currentLocation","lat","lng","loaded","center","initialCenter","google","zoom","position","GoogleApiWrapper","apiKey","Output","dataReceived","dataRequested","Main","Footer","App","calculateWeatherScore","currentPrecipProbability","humidityScore","totalScore","tempScale","Math","abs","medianTemp","stdDevTemp","uvScale","rainScale","fetchCurrentConditions","fetch","then","res","json","parsedJSON","console","log","currently","humidity","precipProbability","apparentTemperature","uvIndex","icon","summary","catch","error","fetchCityList","e","target","fetchDefaultCityList","fetchStateList","fetchDefaultStateList","fetchCountryList","fetchLocation","current","pollution","aqius","location","coordinates","mainus","fetchStd","preventDefault","stateinput","loadDefaultCountry","loadDefaultState","loadDefaultCity","Scheduler","selectedDayHumidity","selectedDayPrecipProbability","selectedDayTempHigh","selectedDayTempLow","selectedDayUV","averagedTemp","selectedDayWeatherScore","selectedDayAveragedTemp","calcuateWeatherScoresByDay","forecastHumidity","forecastPrecipProbability","forecastTempHigh","forecastTempLow","forecastUV","scoresArray","push","forecastWeatherScores","fetchForecast","daily","d","apparentTemperatureHigh","apparentTemperatureLow","forecastIsRaning","forecastTime","sunriseTime","forecastWeatherIcon","forecastWeatherSummary","fetchForecastBySelectedDay","selectedDayIndex","selectedDayIsRaning","selectedDayWeatherIcon","selectedDayWeatherSummary","isDaySelected","handleDayChange","getDeltaSelectedDay","currentDayIndex","deltaSelectedDay","Date","days","currentDayName","getDay","selectedDayAQ","selectedDayData","selectedDayMainPollutant","selectedDayUserTempScale","BestDay","findBestDayToRun","index","indexOf","max","date","bestDayIndex","bestDayFound","getDeltaBestDay","deltaBestDay","Forecast","averagedTempArray","forecastAveragedTemp","isDataRequested","isDataReceived","forecastWeatherIcons","getForecastDayNames","forecastDayNames","getForecastScores","scoreBoard","scoreData","componentWillMount","About","class","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","basename","process","Switch","Route","exact","path","component","document","getElementById","URL","origin","addEventListener","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.be23c4b6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    \r\n    return(\r\n\r\n\r\n      <header>\r\n        <section id =\"mainHeader\">\r\n          <section id=\"brand\">\r\n            <Link to=\"/\">\r\n              <h1>ShouldIRun?</h1>\r\n            </Link>\r\n          </section>\r\n    \r\n          <a href=\"#mainHeaderNav\" id=\"menu-toggle\" className=\"toggle\">\r\n            <i className=\"fa fa-bars fa-2x\" aria-hidden=\"true\"></i>\r\n          </a>\r\n\r\n          <nav id=\"mainHeaderNav\">\r\n            <ul>\r\n              <li>\r\n                <a id=\"nav-close\" className=\"toggle\" href=\"#top\">\r\n                  <i className=\"fa fa-times fa-2x\"></i>\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/\">Home</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/scheduler\">Scheduler</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/bestday\">Best Day</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/forecast\">7 Day Forecast</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/about\">About</Link> \r\n              </li>\r\n            </ul>\r\n          </nav>\r\n\r\n        </section>\r\n        <section id=\"subheader\">\r\n          <p>Get a rating on current weather conditions for your run</p>\r\n        </section>\r\n      </header>\r\n\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass UserOptions extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n\r\n    };\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      handleScaleChange,\r\n      handleWarmthPrefChange,\r\n      userTempScale,\r\n      userWarmthPreference\r\n    } = this.props;\r\n\r\n    return(\r\n\r\n        <section id=\"userOptions\">\r\n\r\n          <section className=\"column\">\r\n          \r\n            <h3>Options</h3>\r\n\r\n            <label>Temperature scale</label>\r\n\r\n            <select \r\n              id=\"userTempScale\" \r\n              value={userTempScale} \r\n              onChange={handleScaleChange}\r\n              >\r\n              <option value=\"f\">Fahrenheit</option>\r\n              <option value=\"c\">Celcius</option>\r\n              <option value=\"k\">Kelvin</option>\r\n            </select>\r\n\r\n          </section>\r\n\r\n          <section className=\"column\">\r\n\r\n            <label>Warmth Preference</label>\r\n\r\n            <select \r\n              id=\"userWarmthPreference\" \r\n              value={userWarmthPreference} \r\n              onChange={handleWarmthPrefChange}\r\n            >\r\n            \r\n              <option value=\"hot\">Mucher Cooler</option>\r\n              <option value=\"warm\">A Little Cooler</option>\r\n              <option value=\"neutral\">Neutral</option>\r\n              <option value=\"chilly\">A Little Warmer</option>\r\n              <option value=\"cold\">Much Warmer</option>\r\n              \r\n            </select>\r\n\r\n          </section>\r\n\r\n        </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default UserOptions;\r\n","import React, { Component } from 'react';\r\n\r\nclass LocationInput extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n\r\n    };\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      cityList,\r\n      cityInput,\r\n      countryInput,\r\n      countryList,\r\n      getData,\r\n      handleCityInput,\r\n      handleCountryInput,\r\n      handleStateInput,\r\n      getLocationData,\r\n      stateInput,\r\n      stateList,\r\n    } = this.props;\r\n\r\n    return(\r\n\r\n        <section id=\"formInput\">\r\n\r\n          <h3>Location</h3>\r\n          \r\n          {/* Get localized weather data data from closest weather station to your IP */}\r\n\r\n          <button id=\"getLocation\" onClick={getLocationData}>Use my location</button>\r\n          \r\n          <p>-- <b>OR</b> --</p>\r\n\r\n          <section className=\"column\">\r\n\r\n            <label id=\"formLabel\">Enter a Location</label>\r\n            \r\n            {/* Select country, state, and city for user location input */}\r\n\r\n            <form>\r\n\r\n              <label htmlFor=\"country\">Country</label>\r\n              <select value={countryInput} onChange={handleCountryInput}>\r\n                {countryList.map((country, i) => <option key={i} value={country}>{country}</option> )}\r\n              </select>\r\n\r\n              <label htmlFor=\"state\">State</label>\r\n              <select value={stateInput} onChange={handleStateInput}>\r\n                {stateList.map((state, i) => <option key={i} value={state}>{state}</option> )}\r\n              </select>\r\n\r\n              <label htmlFor=\"city\">City</label>\r\n              <select value={cityInput} onChange={handleCityInput}>\r\n                {cityList.map((city, i) => <option key={i} value={city}>{city}</option> )}\r\n              </select>\r\n\r\n              <button onClick={getData} type=\"submit\" value=\"submit\" name=\"submit\">Get Data</button>\r\n\r\n            </form>\r\n\r\n          </section>\r\n\r\n        </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default LocationInput;\r\n","import React, { Component } from 'react';\r\nimport UserOptions from './UserOptions';\r\nimport LocationInput from './LocationInput';\r\n\r\nclass Form extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n\r\n    };\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      cityInput,\r\n      cityList,\r\n      countryInput,\r\n      countryList,\r\n      handleCityInput,\r\n      handleCountryInput,\r\n      handleStateInput,\r\n      handleScaleChange,\r\n      handleWarmthPrefChange,\r\n      getData,\r\n      getLocationData,\r\n      stateInput,\r\n      stateList,\r\n      userTempScale,\r\n      userWarmthPreference\r\n    } = this.props;\r\n\r\n    return(\r\n\r\n      <section id=\"formInputSection\">\r\n\r\n        <UserOptions\r\n\r\n          handleScaleChange={handleScaleChange}\r\n          handleWarmthPrefChange={handleWarmthPrefChange}\r\n          userTempScale={userTempScale}\r\n          userWarmthPreference={userWarmthPreference}\r\n\r\n        />\r\n\r\n\r\n        <LocationInput\r\n        \r\n          cityInput={cityInput}\r\n          cityList={cityList}\r\n          countryInput={countryInput}\r\n          countryList={countryList}\r\n          handleCountryInput={handleCountryInput}\r\n          handleStateInput={handleStateInput}\r\n          handleCityInput={handleCityInput}\r\n          getData={getData}\r\n          getLocationData={getLocationData}\r\n          stateInput={stateInput}\r\n          stateList={stateList}\r\n\r\n        />\r\n\r\n      </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Form;\r\n","// Clothing data object to get clothes list based on temperature index and user warmth preference\r\n\r\nconst Clothing = {\r\n    cold: {\r\n      head: {\r\n          text: \"Beanie\",\r\n          imgsrc: \"https://hips.hearstapps.com/vader-prod.s3.amazonaws.com/1533851320-everlane-1533851313.jpg\"\r\n      },\r\n      torso: {\r\n        text: \"Long-sleeve athletic shirt\",\r\n        imgsrc: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQqcsbsQ30ATXDyrEMidoBC4PGQvzDGqlXyehQLyjqHiTJOzxFu\"\r\n      },\r\n      legs: {\r\n        text: \"Insulated track pants\" ,\r\n        imgsrc: \"https://www.patagonia.com/dis/dw/image/v2/ABBM_PRD/on/demandware.static/-/Sites-patagonia-master/default/dw6af579dc/images/hi-res/24102_BLK.jpg?sw=300&sh=300&sfrm=png\"\r\n      },\r\n      feet: {\r\n        text: \"Insulated socks\",\r\n        imgsrc: \"https://www.verywellfit.com/thmb/Wox_s1mhrS095uy3_IQCjjcK1Pw=/1001x1001/filters:no_upscale()/darntoughvermontsocks-56a83a963df78cf7729d2a76.jpg\"\r\n      }\r\n    },\r\n    chilly: {\r\n      head: {\r\n        text: \"Baseball cap\",\r\n        imgsrc: \"https://images-na.ssl-images-amazon.com/images/I/81vqBRNIuKL._UX522_.jpg\"\r\n      },\r\n      torso: {\r\n        text: \"Short-sleeve athletic t-shirt\",\r\n        imgsrc: \"https://alltopguide.com/wp-content/uploads/2016/08/B01AQR03N0.jpg\"\r\n      },\r\n      legs: {\r\n        text: \"Athletic shorts\",\r\n        imgsrc: \"https://media.kohlsimg.com/is/image/kohls/3818758_Black\"\r\n      },\r\n      feet: {\r\n        text: \"Insulated socks\",\r\n        imgsrc: \"https://www.verywellfit.com/thmb/Wox_s1mhrS095uy3_IQCjjcK1Pw=/1001x1001/filters:no_upscale()/darntoughvermontsocks-56a83a963df78cf7729d2a76.jpg\"\r\n      }\r\n    },\r\n    neutral: {\r\n      head: {\r\n        text: \"\",\r\n        imgsrc: \"\"\r\n      },\r\n      torso: {\r\n        text: \"Short-sleeve athletic t-shirt\",\r\n        imgsrc: \"https://alltopguide.com/wp-content/uploads/2016/08/B01AQR03N0.jpg\"\r\n      },\r\n      legs: {\r\n        text: \"Athletic shorts\",\r\n        imgsrc: \"https://media.kohlsimg.com/is/image/kohls/3818758_Black\"\r\n      },\r\n      feet: {\r\n        text: \"Padded socks\",\r\n        imgsrc: \"https://images-na.ssl-images-amazon.com/images/I/91KJNYH1pVL._SX355_.jpg\"\r\n      }\r\n    },\r\n    warm: {\r\n      head: {\r\n        text: \"\",\r\n        imgsrc: \"\"\r\n      },\r\n      torso: {\r\n        text: \"Tank top\",\r\n        imgsrc: \"http://d3d71ba2asa5oz.cloudfront.net/62001083/images/jn305-royalwhite.jpg\"\r\n      },\r\n      legs: {\r\n        text: \"Athletic shorts\",\r\n        imgsrc: \"https://media.kohlsimg.com/is/image/kohls/3818758_Black\"\r\n      },\r\n      feet: {\r\n        text: \"Padded socks\",\r\n        imgsrc: \"https://images-na.ssl-images-amazon.com/images/I/91KJNYH1pVL._SX355_.jpg\"\r\n      }\r\n    },\r\n    hot: {\r\n      head: {\r\n        text: \"\",\r\n        imgsrc: \"\"\r\n      },\r\n      torso: {\r\n        text: \"Tank top\",\r\n        imgsrc: \"http://d3d71ba2asa5oz.cloudfront.net/62001083/images/jn305-royalwhite.jpg\"\r\n      },\r\n      legs: {\r\n        text: \"Athletic shorts\",\r\n        imgsrc: \"https://media.kohlsimg.com/is/image/kohls/3818758_Black\"\r\n      },\r\n      feet: {\r\n        text: \"Padded socks\",\r\n        imgsrc: \"https://images-na.ssl-images-amazon.com/images/I/91KJNYH1pVL._SX355_.jpg\"\r\n      }\r\n    }\r\n};\r\n\r\nexport default Clothing;","import React, { Component } from 'react';\r\nimport Clothing from '../data/Clothing';\r\n\r\nclass ClothesData extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentTempIndex: \"neutral\",\r\n      tempIndexCalculated: false\r\n    };\r\n  }\r\n\r\n  getCurrentTempIndex = () => {\r\n\r\n    const { currentTemp } = this.props;\r\n\r\n    currentTemp >= 85\r\n      ? this.setState({\r\n          currentTempIndex: \"hot\"\r\n        })\r\n      : currentTemp < 85 && currentTemp >= 75\r\n      ? this.setState({\r\n          currentTempIndex: \"warm\"\r\n        })\r\n      : currentTemp < 75  && currentTemp >= 65\r\n      ? this.setState({\r\n          currentTempIndex: \"neutral\"\r\n        })\r\n      : currentTemp < 55 && currentTemp >=45\r\n      ? this.setState({\r\n          currentTempIndex: \"chilly\"\r\n        })\r\n      : currentTemp < 45\r\n      ? this.setState({\r\n          currentTempIndex: \"cold\"\r\n        })\r\n      : this.setState({\r\n          currentTempIndex: this.state.currentTempIndex\r\n      });\r\n\r\n  }\r\n\r\n  calculateWarmthPrefernce = () => {\r\n\r\n    const { userWarmthPreference } = this.props;\r\n\r\n    userWarmthPreference === 'cold'\r\n      ? this.setState({\r\n          currentTempIndex: \"cold\"\r\n        })\r\n      : userWarmthPreference === 'chilly'\r\n      ? this.setState({\r\n          currentTempIndex: \"chilly\"\r\n        })\r\n      : userWarmthPreference === 'warm'\r\n      ? this.setState({\r\n          currentTempIndex: \"warm\"\r\n        })\r\n      : userWarmthPreference === 'hot'\r\n      ? this.setState({\r\n          currentTempIndex: \"hot\"\r\n        })\r\n      : this.getCurrentTempIndex();\r\n\r\n    this.setState({\r\n      tempIndexCalculated: true\r\n    });\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    this.getCurrentTempIndex();\r\n\r\n    this.calculateWarmthPrefernce();\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      currentTempIndex,\r\n      tempIndexCalculated\r\n    } = this.state;\r\n    \r\n    return(\r\n\r\n      <section id=\"clothesData\">\r\n\r\n        <p>What to wear</p>\r\n\r\n        {/* Render nav once temperature index is calculated */}\r\n\r\n        <nav>\r\n\r\n          { tempIndexCalculated ?\r\n\r\n            <ul id=\"clothing\">\r\n\r\n              {/* If not head wear is needed don't render head list item */}\r\n\r\n              {Clothing[currentTempIndex].head.text ?\r\n                  <li id=\"head\">\r\n                    <img alt=\"head\" src={Clothing[currentTempIndex].head.imgsrc} />\r\n                    <p>{Clothing[currentTempIndex].head.text}</p>\r\n                  </li>\r\n              : null }\r\n              <li id=\"torso\">\r\n                <img alt=\"torso\" src={Clothing[currentTempIndex].torso.imgsrc} />\r\n                <p>{Clothing[currentTempIndex].torso.text}</p>\r\n              </li>\r\n              <li id=\"legs\">\r\n                <img alt=\"legs\" src={Clothing[currentTempIndex].legs.imgsrc} />\r\n                <p>{Clothing[currentTempIndex].legs.text}</p>\r\n              </li>\r\n              <li id=\"feet\">\r\n                <img alt=\"feet\" src={Clothing[currentTempIndex].feet.imgsrc} />\r\n                <p>{Clothing[currentTempIndex].feet.text}</p>\r\n              </li>\r\n            </ul>\r\n\r\n          : null }\r\n\r\n        </nav>\r\n\r\n      </section>\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default ClothesData;\r\n","import React, { Component } from 'react';\r\n\r\nclass ScoreData extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      airQuality,\r\n      bestDay,\r\n      currentHumidity,\r\n      currentTemp,\r\n      currentUV,\r\n      currentWeatherIcon,\r\n      currentWeatherSummary,\r\n      data,\r\n      forecastDayName,\r\n      mainPollutant,\r\n      selectedDayName,\r\n      userTempScale,\r\n      weatherScore\r\n    } = this.props;\r\n\r\n    // Number converstions\r\n\r\n    let formattedTemperatureScale = userTempScale.toUpperCase();\r\n\r\n    let convertedTemperature =\r\n\r\n      userTempScale === \"f\"\r\n        ? currentTemp\r\n        : userTempScale === \"c\"\r\n        ? ((currentTemp - 32) * (5/9))\r\n        : userTempScale === \"k\"\r\n        ? ((currentTemp - 32) *(5/9) + 273.15)\r\n        : \"\";\r\n\r\n    let formattedTemperature = `${parseInt(convertedTemperature, 10)} ° ${formattedTemperatureScale}`;\r\n\r\n    let covertedScore = weatherScore.toFixed(1);\r\n\r\n    let convertedHumidity = parseInt((currentHumidity * 100), 10);\r\n\r\n    // calculate scores\r\n\r\n    const getWeatherIcon =\r\n\r\n      currentWeatherIcon === \"partly-cloudy-day\"\r\n        ? \"wi wi-day-sunny-overcast\"\r\n        : currentWeatherIcon === \"wind\"\r\n        ? \"wi wi-day-windy\"\r\n        : currentWeatherIcon === \"sunny\" || currentWeatherIcon === \"clear-day\"\r\n        ? \"wi wi-day-sunny\"\r\n        : currentWeatherIcon === \"clear-night\"\r\n        ? \"wi wi-night-clear\"\r\n        : currentWeatherIcon === \"partly-cloudy-night\"\r\n        ? \"wi wi-night-partly-cloudy\"\r\n        : currentWeatherIcon === \"cloudy\"\r\n        ? \"wi wi-cloudy\"\r\n        : currentWeatherIcon === \"rain\"\r\n        ? \"wi wi-rain\"\r\n        : currentWeatherIcon === \"snow\"\r\n        ? \"wi wi-snow\"\r\n        : currentWeatherIcon === \"sleet\"\r\n        ? \"wi wi-sleet\"\r\n        : currentWeatherIcon === \"fog\"\r\n        ? \"wi wi-fog\"\r\n        : null;\r\n\r\n    const weatherScoreRating =\r\n\r\n      covertedScore >= 7.5\r\n        ? 'Good'\r\n        : covertedScore >= 5 && covertedScore < 7.5\r\n        ? 'Average'\r\n        : covertedScore >= 2.5 && covertedScore < 5\r\n        ? 'Poor'\r\n        : covertedScore >= 0 && covertedScore < 2.5\r\n        ? 'Miserable'\r\n        : null;\r\n\r\n    const getWeatherScoreRatingColor =\r\n\r\n      weatherScoreRating === 'Good'\r\n        ? 'green'\r\n        : weatherScoreRating === 'Average'\r\n        ? 'blue'\r\n        : weatherScoreRating === 'Poor'\r\n        ? 'yellow'\r\n        : weatherScoreRating === 'Miserable'\r\n        ? 'red'\r\n        : null;\r\n\r\n    return(\r\n\r\n      <section id=\"scoreData\">\r\n        \r\n        <span id=\"day\">{bestDay || selectedDayName  || forecastDayName}</span>\r\n        <i id=\"weatherIcon\" className={getWeatherIcon}\r\n        ></i>\r\n        <span id=\"weatherSummary\">\r\n          {currentWeatherSummary}\r\n        </span>\r\n        <span id=\"weatherScore\" className={getWeatherScoreRatingColor}>\r\n          {covertedScore}\r\n          <span id=\"weatherScoreRating\">\r\n            ({weatherScoreRating})\r\n          </span>\r\n        </span>\r\n        <span id=\"currentUV\">\r\n          UV Index: {currentUV}\r\n        </span>\r\n        <span id=\"currentHumidity\">\r\n          {convertedHumidity}% hum.\r\n        </span>\r\n        {airQuality ?\r\n          <span id=\"airQuality\">\r\n            {airQuality}\r\n            <span id=\"mainParticulate\">\r\n              ({mainPollutant})\r\n            </span>\r\n          </span>\r\n        : null}\r\n        <span id=\"temperature\">\r\n          {formattedTemperature}\r\n        </span>\r\n\r\n        {data ?\r\n\r\n        <p id=\"locationOutput\">\r\n          <span id=\"cityOutput\">{data.city}</span>\r\n          <span id=\"stateOutput\">{data.state}</span>\r\n          <span id=\"countryOutput\">{data.country}</span>\r\n        </p>\r\n\r\n        : null\r\n        }\r\n\r\n      </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\n  export default ScoreData;\r\n","// airvisual api key\r\nexport const airVisualApiKey = \"61a41f12-8415-46c9-aaa0-130cf06e8f42\";\r\n\r\n// dark sky api key\r\nexport const darkskyApiKey = \"7caf9128d134c8a87482de7629abebdf\";\r\n\r\n// google maps api key\r\nexport const gmapsApiKey = \"AIzaSyAGNAWHYmzPtl9h2vVMmLBhlD5o3Et1NCw\";\r\n\r\nexport default { \r\n    airVisualApiKey, \r\n    darkskyApiKey, \r\n    gmapsApiKey\r\n};","import React, { Component } from 'react';\r\nimport {Map, Marker, GoogleApiWrapper} from 'google-maps-react';\r\nimport { gmapsApiKey } from '../secrets';\r\n\r\nexport class MapContainer extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    // On render, re-center map by changing state of lat and lng\r\n\r\n    const { currentLat, currentLng } = this.props;\r\n\r\n    this.setState({\r\n      currentLocation: {\r\n        lat: currentLat,\r\n        lng: currentLng\r\n      }\r\n    });\r\n    \r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const { currentLat, currentLng, loaded } = this.props;\r\n\r\n    return (\r\n\r\n      <section id=\"map\">\r\n      \r\n        {loaded ?\r\n\r\n        <Map\r\n          center={{\r\n            lat: currentLat,\r\n            lng: currentLng\r\n          }}\r\n          initialCenter={{\r\n            lat: 38.2527,\r\n            lng: -85.7585\r\n          }}\r\n          google={this.props.google}\r\n          zoom={12}>\r\n\r\n          <Marker\r\n            position={{\r\n              lat: currentLat,\r\n              lng: currentLng\r\n            }}\r\n          />\r\n\r\n        </Map>\r\n        \r\n        : null }\r\n\r\n      </section>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper(\r\n  (props) => ({\r\n    apiKey: gmapsApiKey,\r\n  }\r\n))(MapContainer);\r\n","import React, { Component } from 'react';\r\nimport ClothesData from './ClothesData';\r\nimport ScoreData from './ScoreData';\r\nimport MapContainer from './MapContainer';\r\n\r\nclass Output extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      airQuality,\r\n      currentHumidity,\r\n      currentLat,\r\n      currentLng,\r\n      currentTemp,\r\n      currentUV,\r\n      currentWeatherIcon,\r\n      currentWeatherSummary,\r\n      data,\r\n      dataReceived,\r\n      dataRequested,\r\n      mainPollutant,\r\n      userTempScale,\r\n      userWarmthPreference,\r\n      weatherScore\r\n    } = this.props;\r\n\r\n    return(\r\n\r\n      <section id=\"outputContainer\">\r\n      \r\n      {/* Output section is rendered as loading once data is requested */}\r\n      {/* then renders the clothing list, weather score, and map once data is received */}\r\n\r\n        <section id=\"dataOutput\">\r\n\r\n          { dataRequested ?\r\n          \r\n            <h3>Loading</h3>\r\n            \r\n          : dataReceived ?\r\n\r\n            <ClothesData\r\n              \r\n              currentTemp={currentTemp}\r\n              userWarmthPreference={userWarmthPreference}\r\n\r\n            />\r\n\r\n          : <section id=\"no-data\">\r\n              <h3>You can use the menu to the right to get data</h3>\r\n            </section>}\r\n\r\n          { dataRequested ?\r\n          \r\n            <h3>Loading</h3>\r\n          \r\n          : dataReceived ?\r\n\r\n            <ScoreData\r\n\r\n              airQuality={airQuality}\r\n              currentHumidity={currentHumidity}\r\n              currentTemp={currentTemp}\r\n              currentUV={currentUV}\r\n              currentWeatherIcon={currentWeatherIcon}\r\n              currentWeatherSummary={currentWeatherSummary}\r\n              data={data}\r\n              mainPollutant={mainPollutant}\r\n              userTempScale={userTempScale}\r\n              weatherScore={weatherScore}\r\n\r\n            />\r\n\r\n          :null}\r\n\r\n        </section>\r\n\r\n        { dataRequested ?\r\n        \r\n          <h3>Loading</h3>\r\n\r\n        : dataReceived ?\r\n        \r\n          <MapContainer\r\n\r\n            currentLat={currentLat}\r\n            currentLng={currentLng}\r\n  \r\n          />\r\n\r\n        :null}\r\n\r\n      </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Output;\r\n","import React, { Component } from 'react';\r\nimport Form from './Form';\r\nimport Output from './Output';\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      airQuality,\r\n      cityInput,\r\n      cityList,\r\n      countryInput,\r\n      countryList,\r\n      currentHumidity,\r\n      currentLat,\r\n      currentLng,\r\n      currentTemp,\r\n      currentUV,\r\n      currentWeatherIcon,\r\n      currentWeatherSummary,\r\n      data,\r\n      dataReceived,\r\n      dataRequested,\r\n      handleCityInput,\r\n      handleCountryInput,\r\n      handleStateInput,\r\n      handleScaleChange,\r\n      handleWarmthPrefChange,\r\n      getData,\r\n      getLocationData,\r\n      mainPollutant,\r\n      stateInput,\r\n      stateList,\r\n      userTempScale,\r\n      userWarmthPreference,\r\n      weatherScore\r\n    } = this.props;\r\n\r\n    return(\r\n\r\n      <main id=\"main\">\r\n\r\n        <section id=\"formSection\">\r\n\r\n          <section id=\"mainNav\">\r\n            <a href=\"#formSection\"><i className=\"fas fa-angle-double-right fa-2x\" id=\"openNav\"></i></a>\r\n            <a href=\"#top\"><i className=\"fas fa-angle-double-left fa-2x\" id=\"closeNav\"></i></a>\r\n          </section>\r\n          \r\n          {/* User form for options and location input */}\r\n\r\n          <Form\r\n\r\n            cityInput={cityInput}\r\n            cityList={cityList}\r\n            countryInput={countryInput}\r\n            countryList={countryList}\r\n            handleCityInput={handleCityInput}\r\n            handleCountryInput={handleCountryInput}\r\n            handleScaleChange={handleScaleChange}\r\n            handleStateInput={handleStateInput}\r\n            handleWarmthPrefChange={handleWarmthPrefChange}\r\n            getData={getData}\r\n            getLocationData={getLocationData}\r\n            stateInput={stateInput}\r\n            stateList={stateList}\r\n            userTempScale={userTempScale}\r\n            userWarmthPreference={userWarmthPreference}\r\n\r\n          />\r\n\r\n        </section>\r\n        \r\n        {/* Output of clothing and weather data */}\r\n\r\n        <Output\r\n\r\n          airQuality={airQuality}\r\n          currentHumidity={currentHumidity}\r\n          currentLat={currentLat}\r\n          currentLng={currentLng}\r\n          currentTemp={currentTemp}\r\n          currentUV={currentUV}\r\n          currentWeatherIcon={currentWeatherIcon}\r\n          currentWeatherSummary={currentWeatherSummary}\r\n          data={data}\r\n          dataReceived={dataReceived}\r\n          dataRequested={dataRequested}\r\n          mainPollutant={mainPollutant}\r\n          userTempScale={userTempScale}\r\n          userWarmthPreference={userWarmthPreference}\r\n          weatherScore={weatherScore}\r\n\r\n        />\r\n\r\n      </main>\r\n\r\n    );\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {};\r\n  }\r\n  \r\n  render() {\r\n    \r\n    return(\r\n    \r\n      <footer>\r\n\r\n        <span><a href=\"https://darksky.net/poweredby/\">Powered by Dark Sky</a></span>\r\n        <span>2018</span>\r\n        <span><a href=\"#top\">Github</a></span>\r\n\r\n      </footer>\r\n    \r\n    );\r\n    \r\n  }\r\n  \r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport Header from './header';\r\nimport Main from './main';\r\nimport Footer from './Footer';\r\nimport { airVisualApiKey, darkskyApiKey } from './secrets';\r\nimport './css/App.css';\r\nimport './css/weather-icons.min.css';\r\n\r\n// App Component Main\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    // Set scales for weather score calculations\r\n\r\n    this.medianTemp = 55;\r\n    this.stdDevTemp = 5;\r\n    this.tempScale = 10;\r\n    this.uvScale = 10;\r\n    this.rainScale = 10;\r\n\r\n    this.state = {\r\n      airQuality: 0,\r\n      cityInput: \"Louisville\",\r\n      cityList: [],\r\n      countryInput: \"USA\",\r\n      countryList: [],\r\n      currentWeatherIcon: \"wi wi-sunny-day\",\r\n      currentLat: 38.2527,\r\n      currentLng: -85.7585,\r\n      currentHumidity: 0,\r\n      currentPrecipProbability: 0,\r\n      currentTemp: 0,\r\n      currentUV: 0,\r\n      data: {},\r\n      dataReceived: false,\r\n      dataRequested: false,\r\n      mainPollutant: \"\",\r\n      stateInput: \"Kentucky\",\r\n      stateList: [],\r\n      userTempScale: \"f\",\r\n      userWarmthPreference: \"neutral\",\r\n      weatherScore: 0\r\n    };\r\n\r\n  }\r\n\r\n  // Calculate weather score\r\n\r\n  calculateWeatherScore = () => {\r\n\r\n    const {\r\n      currentHumidity,\r\n      currentPrecipProbability,\r\n      currentTemp,\r\n      currentUV\r\n    } = this.state;\r\n\r\n    // Calculate scores\r\n\r\n    let humidityScore = currentHumidity * 10;\r\n    let tempScore = this.tempScale - ((Math.abs(this.medianTemp - currentTemp)) / this.stdDevTemp);\r\n    let uvScore = (this.uvScale - currentUV);\r\n    let rainScore = (this.rainScale - (currentPrecipProbability * 10));\r\n\r\n    // Combine scores and average\r\n\r\n    let totalScore = ((tempScore + uvScore + humidityScore + rainScore) / 4);\r\n\r\n    this.setState({\r\n      weatherScore: totalScore,\r\n      dataRequested: false,\r\n      dataReceived: true\r\n    });\r\n\r\n  }\r\n\r\n  // Fetch Dark Sky current weather conditions and calculate weather score\r\n\r\n  fetchCurrentConditions = () => {\r\n\r\n    const {currentLat, currentLng} = this.state;\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.darksky.net/forecast/${darkskyApiKey}/${currentLat},${currentLng}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        console.log(\"Fetch Current Conditions: \", parsedJSON);\r\n        this.setState({\r\n          currentHumidity: parsedJSON.currently.humidity,\r\n          currentPrecipProbability: parsedJSON.currently.precipProbability,\r\n          currentTemp: parsedJSON.currently.apparentTemperature,\r\n          currentUV: parsedJSON.currently.uvIndex,\r\n          currentWeatherIcon: parsedJSON.currently.icon,\r\n          currentWeatherSummary: parsedJSON.currently.summary,\r\n        });\r\n        this.calculateWeatherScore();\r\n      })\r\n      .catch(error => console.log(\"fetchCurrentConditions in App component\", error));\r\n\r\n  }\r\n\r\n  // Populate city, state and county select lists\r\n\r\n  fetchCityList = e => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/cities?state=${e.target.value}&country=${this.state.countryInput}&key=${airVisualApiKey}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => parsedJSON.data.map(city => {\r\n        return this.setState({\r\n          cityList: [...this.state.cityList, city.city],\r\n          cityInput: this.state.cityList[0]\r\n        });\r\n      }))\r\n      .catch(error => console.log(\"Fetch city list in App component\", error));\r\n\r\n  }\r\n\r\n  fetchDefaultCityList = (state, country) => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/cities?state=${state}&country=${country}&key=${airVisualApiKey}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => parsedJSON.data.map(city => {\r\n        return this.setState({\r\n          cityList: [...this.state.cityList, city.city],\r\n          cityInput: \"Louisville\"\r\n        });\r\n      }))\r\n      .catch(error => console.log(\"Fetch city list in App component\", error));\r\n\r\n  }\r\n\r\n\r\n  fetchStateList = e => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/states?country=${e.target.value}&key=${airVisualApiKey}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => parsedJSON.data.map(state => {\r\n        return this.setState({\r\n          stateList: [...this.state.stateList, state.state]\r\n        });\r\n      }))\r\n      .catch(error => console.log(\"Fetch state list in App component\", error));\r\n\r\n  }\r\n\r\n  fetchDefaultStateList = (country) => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/states?country=${country}&key=${airVisualApiKey}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => parsedJSON.data.map(state => {\r\n        return this.setState({\r\n          stateList: [...this.state.stateList, state.state],\r\n          stateInput: \"Kentucky\"\r\n        });\r\n      }))\r\n      .catch(error => console.log(\"Fetch state list in App component\", error));\r\n\r\n  }\r\n\r\n  fetchCountryList = () => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/countries?key=${airVisualApiKey}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => parsedJSON.data.map(country => {\r\n        return this.setState({\r\n          countryList: [...this.state.countryList, country.country]\r\n        });\r\n      }))\r\n      .catch(error => console.log(\"Fetch country list in App component\", error)\r\n    );\r\n\r\n  }\r\n\r\n  // Get IP based user location data from AirVisual API then fetch current weather conditions\r\n\r\n  fetchLocation = () => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/nearest_city?key=${airVisualApiKey}`)\r\n    .then(res => res.json())\r\n    .then(parsedJSON => {\r\n      this.setState({\r\n        airQuality : parsedJSON.data.current.pollution.aqius,\r\n        cityInput: parsedJSON.data.city,\r\n        countryInput: parsedJSON.data.country,\r\n        currentLat: parsedJSON.data.location.coordinates[1],\r\n        currentLng: parsedJSON.data.location.coordinates[0],\r\n        data: parsedJSON.data,\r\n        dataRequested: true,\r\n        mainPollutant: parsedJSON.data.current.pollution.mainus,\r\n        stateInput: parsedJSON.data.state\r\n      });\r\n      this.fetchCurrentConditions();\r\n    })\r\n    .catch(error => console.log(\"fetchLocation in App component\", error));\r\n\r\n  }\r\n\r\n  // Fetch user input location weather data fro AirVisual API then fetch current weather condiditons\r\n\r\n  fetchStd = () => {\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.airvisual.com/v2/city?city=${this.state.cityInput}&state=${this.state.stateInput}&country=${this.state.countryInput}&key=${airVisualApiKey}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        this.setState({\r\n          currentLat: parsedJSON.data.location.coordinates[1],\r\n          currentLng: parsedJSON.data.location.coordinates[0],\r\n          dataRequested: true,\r\n          data: parsedJSON.data,\r\n          airQuality : parsedJSON.data.current.pollution.aqius,\r\n          mainPollutant: parsedJSON.data.current.pollution.mainus\r\n        });\r\n        this.fetchCurrentConditions();\r\n      })\r\n      .catch(error => console.log(\"fetchStd in App component\", error));\r\n\r\n  }\r\n\r\n  // Handle user input location form submission\r\n\r\n  getData = e => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      cityInput: this.state.cityInput,\r\n      stateinput: this.state.stateInput,\r\n      countryInput: this.state.countryInput,\r\n    });\r\n\r\n    this.fetchStd();\r\n\r\n  }\r\n\r\n  // Handle button click for IP based user location\r\n\r\n  getLocationData = e => {\r\n    e.preventDefault();\r\n\r\n    this.fetchLocation();\r\n\r\n  }\r\n\r\n  // Handle change in county, state, city select options and populate select options\r\n\r\n  handleCityInput = e => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      cityInput: e.target.value\r\n    });\r\n\r\n  }\r\n\r\n  loadDefaultCountry = () => {\r\n\r\n    this.setState({\r\n      countryInput: \"USA\",\r\n    });\r\n    this.fetchDefaultStateList(\"USA\");\r\n    this.loadDefaultState();\r\n\r\n  }\r\n\r\n  loadDefaultState = () => {\r\n\r\n    this.setState({\r\n      stateInput: \"Kentucky\"\r\n    });\r\n\r\n    this.fetchDefaultCityList(\"Kentucky\", \"USA\");\r\n\r\n    this.loadDefaultCity();\r\n\r\n  }\r\n\r\n  loadDefaultCity = () => {\r\n\r\n    this.setState({\r\n      cityInput: \"Louisville\"\r\n    });\r\n\r\n  }\r\n\r\n  handleCountryInput = e => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      countryInput: e.target.value,\r\n      cityInput: \"\",\r\n      cityList: [],\r\n      stateInput: \"\",\r\n      stateList: []\r\n    });\r\n    this.fetchStateList(e);\r\n\r\n  }\r\n\r\n  handleStateInput = e => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      stateInput: e.target.value,\r\n      cityInput: \"\",\r\n      cityList: []\r\n    });\r\n    this.fetchCityList(e);\r\n\r\n  }\r\n\r\n  handleScaleChange = e => {\r\n    this.setState({\r\n      userTempScale: e.target.value\r\n    });\r\n  }\r\n\r\n  handleWarmthPrefChange = e => {\r\n    this.setState({\r\n      userWarmthPreference: e.target.value\r\n    });\r\n\r\n  }\r\n\r\n\r\n  // Populate selects with country, state, and city data\r\n\r\n  componentDidMount() {\r\n\r\n    this.fetchCountryList();\r\n\r\n    this.loadDefaultCountry();\r\n\r\n    console.log(\"App component mounted state:\", this.state);\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      airQuality,\r\n      cityInput,\r\n      cityList,\r\n      countryInput,\r\n      countryList,\r\n      currentHumidity,\r\n      currentLat,\r\n      currentLng,\r\n      currentTemp,\r\n      currentUV,\r\n      currentWeatherIcon,\r\n      currentWeatherSummary,\r\n      data,\r\n      dataReceived,\r\n      dataRequested,\r\n      mainPollutant,\r\n      stateInput,\r\n      stateList,\r\n      userTempScale,\r\n      userWarmthPreference,\r\n      weatherScore\r\n    } = this.state;\r\n\r\n    return (\r\n\r\n      <div className=\"App\">\r\n\r\n        <Header/>\r\n\r\n        <Main\r\n\r\n          airQuality={airQuality}\r\n          cityInput={cityInput}\r\n          cityList={cityList}\r\n          countryInput={countryInput}\r\n          countryList={countryList}\r\n          currentHumidity={currentHumidity}\r\n          currentLat={currentLat}\r\n          currentLng={currentLng}\r\n          currentTemp={currentTemp}\r\n          currentUV={currentUV}\r\n          currentWeatherIcon={currentWeatherIcon}\r\n          currentWeatherSummary={currentWeatherSummary}\r\n          data={data}\r\n          dataReceived={dataReceived}\r\n          dataRequested={dataRequested}\r\n          getData={this.getData}\r\n          getLocationData={this.getLocationData}\r\n          handleCityInput={this.handleCityInput}\r\n          handleCountryInput={this.handleCountryInput}\r\n          handleStateInput={this.handleStateInput}\r\n          handleScaleChange={this.handleScaleChange}\r\n          handleWarmthPrefChange={this.handleWarmthPrefChange}\r\n          mainPollutant={mainPollutant}\r\n          stateInput={stateInput}\r\n          stateList={stateList}\r\n          userTempScale={userTempScale}\r\n          userWarmthPreference={userWarmthPreference}\r\n          weatherScore={weatherScore}\r\n\r\n        />\r\n\r\n        <Footer />\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport { darkskyApiKey } from './secrets';\r\nimport ScoreData from './main/ScoreData';\r\nimport Header from './header';\r\nimport Footer from './Footer';\r\n\r\nclass Scheduler extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.d = new Date();\r\n\r\n    this.days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n\r\n    this.medianTemp = 55;\r\n    this.stdDevTemp = 5;\r\n    this.tempScale = 10;\r\n    this.uvScale = 10;\r\n    this.rainScale = 10;\r\n\r\n    this.state = {\r\n      currentDayName: this.days[this.d.getDay()],\r\n      currentDayIndex: this.d.getDay(),\r\n      selectedDayName: this.days[this.d.getDay()],\r\n      selectedDayIndex: 0,\r\n      deltaSelectedDay: 0,\r\n      currentLat: 38.2527,\r\n      currentLng: -85.7585,\r\n      forecastHumidity: [],\r\n      forecastTempHigh: [],\r\n      forecastTempLow: [],\r\n      forecastTime: [],\r\n      forecastUV: [],\r\n      forecastPrecipProbability: [],\r\n      forecastWeatherScores: [],\r\n      forecastWeatherIcon: \"wi wi-na\",\r\n      forecastWeatherSummary: \"\",\r\n      isDaySelected: false,\r\n      selectedDayAQ: 0,\r\n      selectedDayHumidity: 0,\r\n      selectedDayIsRaning: 0,\r\n      selectedDayTempHigh: 0,\r\n      selectedDayTempLow: 0,\r\n      selectedDayAveragedTemp: 0,\r\n      selectedDayUV: 0,\r\n      selectedDayWeatherSummary: \"\",\r\n      selectedDayData: false,\r\n      selectedDayMainPollutant: \"\",\r\n      selectedDayUserTempScale: \"f\",\r\n      selectedDayWeatherIcon: \"wi wi-na\",\r\n      selectedDayWeatherScore: 0\r\n\r\n    };\r\n  }\r\n\r\n  // Calculate weather score\r\n\r\n  calculateWeatherScore = () => {\r\n\r\n    const {\r\n      selectedDayHumidity,\r\n      selectedDayPrecipProbability,\r\n      selectedDayTempHigh,\r\n      selectedDayTempLow,\r\n      selectedDayUV\r\n    } = this.state;\r\n\r\n    // Normalize data for display\r\n\r\n    let humidityScore = selectedDayHumidity * 10;\r\n    let averagedTemp = (selectedDayTempHigh + selectedDayTempLow) / 2;\r\n    let tempScore = this.tempScale - ((Math.abs(this.medianTemp - averagedTemp)) / this.stdDevTemp);\r\n    let uvScore = (this.uvScale - selectedDayUV);\r\n    let rainScore = (this.rainScale - (selectedDayPrecipProbability * 10));\r\n\r\n    let totalScore = ((tempScore + uvScore + humidityScore + rainScore) / 4);\r\n\r\n    this.setState({\r\n      selectedDayWeatherScore: totalScore,\r\n      selectedDayAveragedTemp: averagedTemp\r\n    });\r\n\r\n  }\r\n\r\n  // Calculate each day's weather score and push to array then find the best day to run\r\n\r\n  calcuateWeatherScoresByDay = () => {\r\n\r\n    const {\r\n      forecastHumidity,\r\n      forecastPrecipProbability,\r\n      forecastTempHigh,\r\n      forecastTempLow,\r\n      forecastUV,\r\n    } = this.state;\r\n\r\n    const scoresArray = [];\r\n\r\n    for(let i=0; i <=7; i++) {\r\n\r\n      let humidityScore = forecastHumidity[i] * 10;\r\n      let averagedTemp = (forecastTempHigh[i] + forecastTempLow[i]) / 2;\r\n      let tempScore = this.tempScale - ((Math.abs(this.medianTemp - averagedTemp)) / this.stdDevTemp);\r\n      let uvScore = (this.uvScale - forecastUV[i]);\r\n      let rainScore = (this.rainScale - (forecastPrecipProbability[i] * 10));\r\n\r\n      let totalScore = ((tempScore + uvScore + humidityScore + rainScore) / 4);\r\n\r\n      scoresArray.push(totalScore);\r\n\r\n    }\r\n\r\n    this.setState({\r\n        forecastWeatherScores: scoresArray\r\n      });\r\n\r\n  }\r\n\r\n  // Fetch forecast data and call weather score calculator\r\n\r\n  fetchForecast = () => {\r\n\r\n    const {currentLat, currentLng} = this.state;\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.darksky.net/forecast/${darkskyApiKey}/${currentLat},${currentLng}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        this.setState({\r\n          forecastHumidity: parsedJSON.daily.data.map(d => d.humidity),\r\n          forecastPrecipProbability: parsedJSON.daily.data.map(d => d.precipProbability),\r\n          forecastTempHigh: parsedJSON.daily.data.map(d => d.apparentTemperatureHigh),\r\n          forecastTempLow: parsedJSON.daily.data.map(d => d.apparentTemperatureLow),\r\n          forecastUV: parsedJSON.daily.data.map(d => d.uvIndex),\r\n          forecastIsRaning: parsedJSON.daily.data.map(d => d.precipProbability),\r\n          forecastTime: parsedJSON.daily.data.map(d => d.sunriseTime),\r\n          forecastWeatherIcon: parsedJSON.daily.data.map(d => d.icon),\r\n          forecastWeatherSummary: parsedJSON.daily.data.map(d => d.summary)\r\n        });\r\n        this.calcuateWeatherScoresByDay();\r\n      })\r\n      .catch(error => console.log(`fetchForecast error in Scheduler: ${error}`));\r\n\r\n  }\r\n\r\n  // Fetch day data and then call weather score calculator\r\n\r\n  fetchForecastBySelectedDay = () => {\r\n\r\n    const {currentLat, currentLng, selectedDayIndex} = this.state;\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.darksky.net/forecast/${darkskyApiKey}/${currentLat},${currentLng}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        this.setState({\r\n          selectedDayHumidity: parsedJSON.daily.data[selectedDayIndex].humidity,\r\n          selectedDayPrecipProbability: parsedJSON.daily.data[selectedDayIndex].precipProbability,\r\n          selectedDayTempHigh: parsedJSON.daily.data[selectedDayIndex].apparentTemperatureHigh,\r\n          selectedDayTempLow: parsedJSON.daily.data[selectedDayIndex].apparentTemperatureLow,\r\n          selectedDayUV: parsedJSON.daily.data[selectedDayIndex].uvIndex,\r\n          selectedDayIsRaning: parsedJSON.daily.data[selectedDayIndex].precipProbability,\r\n          selectedDayWeatherIcon: parsedJSON.daily.data[selectedDayIndex].icon,\r\n          selectedDayWeatherSummary: parsedJSON.daily.data[selectedDayIndex].summary,\r\n          isDaySelected: true\r\n        });\r\n        this.calculateWeatherScore();\r\n      })\r\n      .catch(error => console.log(`fetchForecastBySelectedDay error in Scheduler: ${error}`));\r\n\r\n  }\r\n\r\n  handleDayChange = e => {\r\n    e.preventDefault();\r\n\r\n    let selectedDayIndex = e.target.value === \"Sunday\"\r\n      ? 0\r\n      : e.target.value === \"Monday\"\r\n      ? 1\r\n      : e.target.value === \"Tuesday\"\r\n      ? 2\r\n      : e.target.value === \"Wednesday\"\r\n      ? 3\r\n      : e.target.value === \"Thursday\"\r\n      ? 4\r\n      : e.target.value === \"Friday\"\r\n      ? 5\r\n      : e.target.value === \"Saturday\"\r\n      ? 6\r\n      : null;\r\n\r\n    this.setState({\r\n      selectedDayName: e.target.value,\r\n      selectedDayIndex: selectedDayIndex,\r\n    });\r\n\r\n    this.getDeltaSelectedDay();\r\n\r\n  }\r\n\r\n  // Get difference in index between selected day and current day to find index to get data\r\n  // selected day index in data array is relative to current day of index 0\r\n\r\n  getDeltaSelectedDay = () => {\r\n\r\n    const { selectedDayIndex, currentDayIndex } = this.state;\r\n\r\n    let dayScale = 7;\r\n\r\n    this.setState({\r\n\r\n      deltaSelectedDay: currentDayIndex < selectedDayIndex\r\n      ? (selectedDayIndex - currentDayIndex)\r\n      : currentDayIndex > selectedDayIndex\r\n      ? (dayScale - (currentDayIndex - selectedDayIndex))\r\n      : currentDayIndex === selectedDayIndex\r\n      ? 0\r\n      : null\r\n\r\n    },\r\n    this.fetchForecastBySelectedDay()\r\n    );\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"Scheduler component mount state: \", this.state);\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      isDaySelected,\r\n      selectedDayName,\r\n      selectedDayAQ,\r\n      selectedDayHumidity,\r\n      selectedDayAveragedTemp,\r\n      selectedDayUV,\r\n      selectedDayWeatherIcon,\r\n      selectedDayWeatherSummary,\r\n      selectedDayData,\r\n      selectedDayMainPollutant,\r\n      selectedDayUserTempScale,\r\n      selectedDayWeatherScore\r\n    } = this.state;\r\n\r\n    return(\r\n\r\n        <section id=\"schedulerSection\">\r\n\r\n            <Header />\r\n\r\n            <section id=\"scheduler\" className=\"column\">\r\n\r\n                <h2>Scheduler</h2>\r\n\r\n                <p>Pick a day to get information or find the best day in the next week</p>\r\n\r\n                <label>Pick a day of the week</label>\r\n                <select value={selectedDayName} onChange={this.handleDayChange}>\r\n                  <option value=\"Sunday\">Sunday</option>\r\n                  <option value=\"Monday\">Monday</option>\r\n                  <option value=\"Tuesday\">Tuesday</option>\r\n                  <option value=\"Wednesday\">Wednesday</option>\r\n                  <option value=\"Thursday\">Thursday</option>\r\n                  <option value=\"Friday\">Friday</option>\r\n                  <option value=\"Saturday\">Saturday</option>\r\n                </select>\r\n\r\n                {isDaySelected ?\r\n\r\n                    <ScoreData\r\n\r\n                      airQuality={selectedDayAQ}\r\n                      currentHumidity={selectedDayHumidity}\r\n                      currentTemp={selectedDayAveragedTemp}\r\n                      currentUV={selectedDayUV}\r\n                      currentWeatherIcon={selectedDayWeatherIcon}\r\n                      currentWeatherSummary={selectedDayWeatherSummary}\r\n                      data={selectedDayData}\r\n                      mainPollutant={selectedDayMainPollutant}\r\n                      selectedDayName={selectedDayName}\r\n                      userTempScale={selectedDayUserTempScale}\r\n                      weatherScore={selectedDayWeatherScore}\r\n                    />\r\n\r\n                : null\r\n\r\n                }\r\n\r\n            </section>\r\n\r\n            <Footer / >\r\n\r\n        </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\n  export default Scheduler;\r\n","import React, { Component } from 'react';\r\nimport { darkskyApiKey } from './secrets';\r\nimport ScoreData from './main/ScoreData';\r\nimport Header from './header';\r\nimport Footer from './Footer';\r\n\r\nclass BestDay extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.d = new Date();\r\n\r\n    this.days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n\r\n    this.medianTemp = 55;\r\n    this.stdDevTemp = 5;\r\n    this.tempScale = 10;\r\n    this.uvScale = 10;\r\n    this.rainScale = 10;\r\n\r\n    this.state = {\r\n      bestDay: null,\r\n      bestDayIndex: null,\r\n      bestDayFound: false,\r\n      currentDayName: this.days[this.d.getDay()],\r\n      currentDayIndex: this.d.getDay(),\r\n      selectedDayIndex: null,\r\n      deltaSelectedDay: null,\r\n      currentLat: 38.2527,\r\n      currentLng: -85.7585,\r\n      forecastHumidity: [],\r\n      forecastTempHigh: [],\r\n      forecastTempLow: [],\r\n      forecastTime: [],\r\n      forecastUV: [],\r\n      forecastPrecipProbability: [],\r\n      forecastWeatherScores: [],\r\n      forecastWeatherIcon: \"wi wi-na\",\r\n      forecastWeatherSummary: \"\",\r\n      isDaySelected: false,\r\n      selectedDayAQ: 0,\r\n      selectedDayHumidity: 0,\r\n      selectedDayIsRaning: 0,\r\n      selectedDayTempHigh: 0,\r\n      selectedDayTempLow: 0,\r\n      selectedDayAveragedTemp: 0,\r\n      selectedDayUV: 0,\r\n      selectedDayWeatherSummary: \"\",\r\n      selectedDayData: false,\r\n      selectedDayMainPollutant: \"\",\r\n      selectedDayUserTempScale: \"f\",\r\n      selectedDayWeatherIcon: \"wi wi-na\",\r\n      selectedDayWeatherScore: 0\r\n\r\n    };\r\n  }\r\n\r\n  // Calculate weather score\r\n\r\n  calculateWeatherScore = () => {\r\n\r\n    const {\r\n      selectedDayHumidity,\r\n      selectedDayPrecipProbability,\r\n      selectedDayTempHigh,\r\n      selectedDayTempLow,\r\n      selectedDayUV\r\n    } = this.state;\r\n\r\n    // Set scales and defaults\r\n\r\n    // Normalize data for display\r\n\r\n    let humidityScore = selectedDayHumidity * 10;\r\n    let averagedTemp = (selectedDayTempHigh + selectedDayTempLow) / 2;\r\n    let tempScore = this.tempScale - ((Math.abs(this.medianTemp - averagedTemp)) / this.stdDevTemp);\r\n    let uvScore = (this.uvScale - selectedDayUV);\r\n    let rainScore = (this.rainScale - (selectedDayPrecipProbability * 10));\r\n\r\n    let totalScore = ((tempScore + uvScore + humidityScore + rainScore) / 4);\r\n\r\n    this.setState({\r\n      selectedDayWeatherScore: totalScore,\r\n      selectedDayAveragedTemp: averagedTemp\r\n    });\r\n\r\n  }\r\n\r\n  findBestDayToRun = () => {\r\n\r\n    const {\r\n      forecastTime,\r\n      forecastWeatherScores\r\n    } = this.state;\r\n\r\n    // Get highest score in 7 day range from api data\r\n\r\n    let index = forecastWeatherScores.indexOf(Math.max(...forecastWeatherScores));\r\n\r\n    // Convert millisecond time to date then to day of week index\r\n\r\n    let date = new Date(forecastTime[index] * 1000);\r\n\r\n    let convertedDate = new Date(date);\r\n\r\n    let bestDayIndex = convertedDate.getDay();\r\n\r\n    // Get day name from index\r\n\r\n    let bestDay =\r\n\r\n      bestDayIndex === 0\r\n      ? 'Sunday'\r\n      : bestDayIndex === 1\r\n      ? 'Monday'\r\n      : bestDayIndex === 2\r\n      ? 'Tuesday'\r\n      : bestDayIndex === 3\r\n      ? 'Wednesday'\r\n      : bestDayIndex === 4\r\n      ? 'Thursday'\r\n      : bestDayIndex === 5\r\n      ? 'Friday'\r\n      : bestDayIndex === 6\r\n      ? 'Saturday'\r\n      : null;\r\n\r\n      this.setState({\r\n        bestDay: bestDay,\r\n        bestDayIndex: bestDayIndex,\r\n        bestDayFound: true,\r\n      });\r\n\r\n      this.getDeltaBestDay();\r\n\r\n      this.fetchForecastBySelectedDay();\r\n\r\n  }\r\n\r\n  // Calculate each day's weather score and push to array then find the best day to run\r\n\r\n  calcuateWeatherScoresByDay = () => {\r\n\r\n    const {\r\n      forecastHumidity,\r\n      forecastPrecipProbability,\r\n      forecastTempHigh,\r\n      forecastTempLow,\r\n      forecastUV,\r\n    } = this.state;\r\n\r\n    const scoresArray = [];\r\n\r\n    for(let i=0; i <=7; i++) {\r\n\r\n      let humidityScore = forecastHumidity[i] * 10;\r\n      let averagedTemp = (forecastTempHigh[i] + forecastTempLow[i]) / 2;\r\n      let tempScore = this.tempScale - ((Math.abs(this.medianTemp - averagedTemp)) / this.stdDevTemp);\r\n      let uvScore = (this.uvScale - forecastUV[i]);\r\n      let rainScore = (this.rainScale - (forecastPrecipProbability[i] * 10));\r\n\r\n      let totalScore = ((tempScore + uvScore + humidityScore + rainScore) / 4);\r\n\r\n      scoresArray.push(totalScore);\r\n\r\n    }\r\n\r\n    this.setState({\r\n        forecastWeatherScores: scoresArray\r\n      });\r\n\r\n    this.findBestDayToRun();\r\n\r\n  }\r\n\r\n  // Fetch forecast data and call weather score calculator\r\n\r\n  fetchForecast = () => {\r\n\r\n    const {currentLat, currentLng} = this.state;\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.darksky.net/forecast/${darkskyApiKey}/${currentLat},${currentLng}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        this.setState({\r\n          forecastHumidity: parsedJSON.daily.data.map(d => d.humidity),\r\n          forecastPrecipProbability: parsedJSON.daily.data.map(d => d.precipProbability),\r\n          forecastTempHigh: parsedJSON.daily.data.map(d => d.apparentTemperatureHigh),\r\n          forecastTempLow: parsedJSON.daily.data.map(d => d.apparentTemperatureLow),\r\n          forecastUV: parsedJSON.daily.data.map(d => d.uvIndex),\r\n          forecastIsRaning: parsedJSON.daily.data.map(d => d.precipProbability),\r\n          forecastTime: parsedJSON.daily.data.map(d => d.sunriseTime),\r\n          forecastWeatherIcon: parsedJSON.daily.data.map(d => d.icon),\r\n          forecastWeatherSummary: parsedJSON.daily.data.map(d => d.summary)\r\n        });\r\n        this.calcuateWeatherScoresByDay();\r\n      })\r\n      .catch(error => console.log(`fetchForcas error in Best Day: ${error}`));\r\n\r\n  }\r\n\r\n  // Fetch day data and then call weather score calculator\r\n\r\n  fetchForecastBySelectedDay = () => {\r\n\r\n    const {currentLat, currentLng, selectedDayIndex} = this.state;\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.darksky.net/forecast/${darkskyApiKey}/${currentLat},${currentLng}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        this.setState({\r\n          selectedDayHumidity: parsedJSON.daily.data[selectedDayIndex].humidity,\r\n          selectedDayPrecipProbability: parsedJSON.daily.data[selectedDayIndex].precipProbability,\r\n          selectedDayTempHigh: parsedJSON.daily.data[selectedDayIndex].apparentTemperatureHigh,\r\n          selectedDayTempLow: parsedJSON.daily.data[selectedDayIndex].apparentTemperatureLow,\r\n          selectedDayUV: parsedJSON.daily.data[selectedDayIndex].uvIndex,\r\n          selectedDayIsRaning: parsedJSON.daily.data[selectedDayIndex].precipProbability,\r\n          selectedDayWeatherIcon: parsedJSON.daily.data[selectedDayIndex].icon,\r\n          selectedDayWeatherSummary: parsedJSON.daily.data[selectedDayIndex].summary\r\n        });\r\n        this.calculateWeatherScore();\r\n      })\r\n      .catch(error => console.log(`fetchForecastBySelectedDay error in Best Day: ${error}`));\r\n\r\n  }\r\n\r\n  // Get difference in index between best day and current day to find index to get data\r\n  // best day index in data array is relative to current day of index 0\r\n\r\n  getDeltaBestDay = () => {\r\n\r\n    const { bestDayIndex, currentDayIndex } = this.state;\r\n\r\n    let deltaBestDay = (bestDayIndex - currentDayIndex);\r\n\r\n    this.setState({\r\n      selectedDayIndex: deltaBestDay\r\n    });\r\n\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    console.log(\"Best Day mounted state: \", this.state);\r\n  }\r\n\r\n  render() {\r\n\r\n    const {\r\n      bestDay,\r\n      bestDayFound,\r\n      selectedDayAQ,\r\n      selectedDayHumidity,\r\n      selectedDayAveragedTemp,\r\n      selectedDayUV,\r\n      selectedDayWeatherIcon,\r\n      selectedDayWeatherSummary,\r\n      selectedDayData,\r\n      selectedDayMainPollutant,\r\n      selectedDayUserTempScale,\r\n      selectedDayWeatherScore\r\n    } = this.state;\r\n\r\n    return(\r\n\r\n        <section id=\"schedulerSection\">\r\n\r\n            <Header />\r\n\r\n            <section id=\"bestDay\" className=\"column\">\r\n\r\n              <h2>Best Day</h2>\r\n\r\n              <p>Find the best day to run in the next 7 days</p>\r\n\r\n\r\n              <label>Find the best day of the week</label>\r\n              <button\r\n                onClick={this.fetchForecast}\r\n              >\r\n                Go\r\n              </button>\r\n\r\n              {bestDayFound ?\r\n\r\n                  <ScoreData\r\n\r\n                    airQuality={selectedDayAQ}\r\n                    bestDay={bestDay}\r\n                    currentHumidity={selectedDayHumidity}\r\n                    currentTemp={selectedDayAveragedTemp}\r\n                    currentUV={selectedDayUV}\r\n                    currentWeatherIcon={selectedDayWeatherIcon}\r\n                    currentWeatherSummary={selectedDayWeatherSummary}\r\n                    data={selectedDayData}\r\n                    mainPollutant={selectedDayMainPollutant}\r\n                    userTempScale={selectedDayUserTempScale}\r\n                    weatherScore={selectedDayWeatherScore}\r\n                  />\r\n\r\n              : null\r\n\r\n              }\r\n\r\n            </section>\r\n\r\n            <Footer / >\r\n\r\n        </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\n  export default BestDay;\r\n","import React, { Component } from 'react';\r\nimport { darkskyApiKey } from './secrets';\r\nimport ScoreData from './main/ScoreData';\r\nimport Header from './header';\r\nimport Footer from './Footer';\r\n\r\nclass Forecast extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.d = new Date();\r\n\r\n    // repeated days to get 7 days out from any selected day (i.e. Saturday to Sunday)\r\n    \r\n    this.days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\"\r\n    ];\r\n\r\n    this.medianTemp = 55;\r\n    this.stdDevTemp = 5;\r\n    this.tempScale = 10;\r\n    this.uvScale = 10;\r\n    this.rainScale = 10;\r\n\r\n    this.state = {\r\n      currentDayName: this.days[this.d.getDay()],\r\n      currentDayIndex: this.d.getDay(),\r\n      currentLat: 38.2527,\r\n      currentLng: -85.7585,\r\n      forecastAveragedTemp: [],\r\n      forecastDayNames: [],\r\n      forecastHumidity: [],\r\n      forecastPrecipProbability: [],\r\n      forecastTempHigh: [],\r\n      forecastTempLow: [],\r\n      forecastTime: [],\r\n      forecastUV: [],\r\n      forecastWeatherIcons: [],\r\n      forecastWeatherScores: [],\r\n      forecastWeatherSummary: [],\r\n      isDataReceived: false,\r\n      isDataRequested: false,\r\n      userTempScale: 'f'\r\n\r\n    };\r\n  }\r\n\r\n  // Calculate each day's weather score and push to array then find the best day to run\r\n\r\n  calcuateWeatherScoresByDay = () => {\r\n\r\n    const {\r\n      forecastHumidity,\r\n      forecastTempHigh,\r\n      forecastTempLow,\r\n      forecastUV,\r\n      forecastPrecipProbability\r\n    } = this.state;\r\n\r\n    const scoresArray = [];\r\n    \r\n    const averagedTempArray = [];\r\n\r\n    for(let i = 0; i <= 7; i++) {\r\n\r\n      let humidityScore = forecastHumidity[i] * 10;\r\n      let averagedTemp = (forecastTempHigh[i] + forecastTempLow[i]) / 2;\r\n      let tempScore = this.tempScale - ((Math.abs(this.medianTemp - averagedTemp)) / this.stdDevTemp);\r\n      let uvScore = (this.uvScale - forecastUV[i]);\r\n      let rainScore = (this.rainScale - (forecastPrecipProbability[i] * 10));\r\n\r\n      let totalScore = ((tempScore + uvScore + humidityScore + rainScore) / 4);\r\n\r\n      averagedTempArray.push(averagedTemp);\r\n\r\n      scoresArray.push(totalScore);\r\n\r\n    }\r\n\r\n    this.setState({\r\n      forecastWeatherScores: scoresArray,\r\n      forecastAveragedTemp: averagedTempArray,\r\n      isDataRequested: false,\r\n      isDataReceived: true\r\n    });\r\n    \r\n  }\r\n\r\n  // Fetch forecast data, set day names array, and calculate weather scores\r\n\r\n  fetchForecast = () => {\r\n\r\n    const {currentLat, currentLng} = this.state;\r\n\r\n    fetch(`https://calm-refuge-25215.herokuapp.com/https://api.darksky.net/forecast/${darkskyApiKey}/${currentLat},${currentLng}`)\r\n      .then(res => res.json())\r\n      .then(parsedJSON => {\r\n        this.setState({\r\n          forecastHumidity: parsedJSON.daily.data.map(d => d.humidity),\r\n          forecastPrecipProbability: parsedJSON.daily.data.map(d => d.precipProbability),\r\n          forecastTempHigh: parsedJSON.daily.data.map(d => d.apparentTemperatureHigh),\r\n          forecastTempLow: parsedJSON.daily.data.map(d => d.apparentTemperatureLow),\r\n          forecastUV: parsedJSON.daily.data.map(d => d.uvIndex),\r\n          forecastIsRaning: parsedJSON.daily.data.map(d => d.precipProbability),\r\n          forecastTime: parsedJSON.daily.data.map(d => d.sunriseTime),\r\n          forecastWeatherIcons: parsedJSON.daily.data.map(d => d.icon),\r\n          forecastWeatherSummary: parsedJSON.daily.data.map(d => d.summary),\r\n          isDataRequested: true\r\n        });\r\n        this.getForecastDayNames();\r\n        this.calcuateWeatherScoresByDay();\r\n      })\r\n      .catch(error => console.log(`fetchForecast error in Scheduler: ${error}`));\r\n\r\n  }\r\n  \r\n  // Create array of day names starting with the current day of the week\r\n  \r\n  getForecastDayNames = () => {\r\n    \r\n    const { forecastDayNames } = this.state;\r\n    \r\n    for(let i = 0; i < 7 ; i++) {\r\n      forecastDayNames[i] = this.days[(this.d.getDay() + i)];\r\n    }\r\n    \r\n  }\r\n  \r\n  getForecastScores = () => {\r\n    \r\n    const {\r\n      forecastHumidity,\r\n      forecastAveragedTemp,\r\n      forecastUV,\r\n      forecastWeatherIcons,\r\n      forecastWeatherSummary,\r\n      forecastDayNames,\r\n      userTempScale,\r\n      forecastWeatherScores\r\n    } = this.state;\r\n    \r\n    let scoreBoard = [];\r\n    \r\n    let scoreData = [];\r\n    \r\n    for (let i = 0; i < 7; i++) {\r\n      \r\n      scoreData.push(\r\n        \r\n          <ScoreData\r\n            key={i}\r\n            currentHumidity={forecastHumidity[i]}\r\n            currentTemp={forecastAveragedTemp[i]}\r\n            currentUV={forecastUV[i]}\r\n            currentWeatherIcon={forecastWeatherIcons[i]}\r\n            currentWeatherSummary={forecastWeatherSummary[i]}\r\n            forecastDayName={forecastDayNames[i]}\r\n            userTempScale={userTempScale}\r\n            weatherScore={forecastWeatherScores[i]}\r\n          />\r\n      )\r\n      \r\n    }\r\n    \r\n    scoreBoard.push(scoreData);\r\n    \r\n    return scoreBoard;\r\n    \r\n  }\r\n  \r\n  componentWillMount() {\r\n    \r\n    this.fetchForecast();\r\n\r\n  }\r\n\r\n  render() {\r\n    \r\n    const {\r\n      isDataRequested,\r\n      isDataReceived\r\n    } = this.state;\r\n\r\n    return(\r\n\r\n        <section id=\"forecastSection\">\r\n\r\n            <Header/>\r\n\r\n            <section id=\"sevenDayForecast\" className=\"column\">\r\n\r\n                <h2>7 Day Forecast</h2>\r\n                \r\n                {/* Render ul once data is received */}\r\n\r\n                { isDataRequested ?\r\n                \r\n                  <h3>Loading...</h3>\r\n                \r\n                : isDataReceived ?\r\n\r\n                <ul>\r\n\r\n                  {this.getForecastScores()}\r\n                  \r\n                </ul>\r\n\r\n                : null }\r\n\r\n            </section>\r\n\r\n            <Footer / >\r\n\r\n        </section>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\n  export default Forecast;\r\n","import React, { Component } from 'react';\r\nimport Header from './header';\r\nimport Footer from './Footer';\r\n\r\nclass About extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n\r\n    return(\r\n\r\n        <section id=\"aboutSection\">\r\n\r\n            <Header />\r\n\r\n            <section id=\"about\" className=\"column\">\r\n\r\n                <h2>About</h2>\r\n\r\n                <p>Get a rating on weather conditions for outdoor activities</p>\r\n\r\n                <a href=\"https://jbratcher.github.io/ShouldIRun/\" class=\"button\">Demo page</a>\r\n\r\n            </section>\r\n\r\n            <Footer / >\r\n\r\n        </section>\r\n\r\n    )\r\n\r\n  }\r\n\r\n}\r\n\r\n  export default About;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport Scheduler from './Scheduler';\r\nimport BestDay from './BestDay';\r\nimport Forecast from './Forecast';\r\nimport About from './About';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(\r\n    <Router basename={process.env.PUBLIC_URL}> \r\n        <Switch>\r\n            <Route exact path=\"/\" component={ App }/> \r\n            \r\n            {/* props passed to top level routes */ }\r\n            \r\n            <Route\r\n                exact path='/scheduler'\r\n                render={(props) => <Scheduler {...props} />}\r\n            />\r\n            <Route\r\n                exact path='/bestday'\r\n                render={(props) => <BestDay {...props} />}\r\n            />\r\n            <Route\r\n                exact path='/forecast'\r\n                render={(props) => <Forecast {...props} />}\r\n            />\r\n            <Route\r\n                exact path='/about'\r\n                render={(props) => <About {...props} />}\r\n            />\r\n        </Switch>\r\n    </Router>, \r\n    document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}